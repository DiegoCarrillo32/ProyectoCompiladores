//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/kosti/RiderProjects/AvaloniaApplication5/AvaloniaApplication5/MiniCScanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Using=1, Class=2, VarDecl=3, ClassDecl=4, MethodDecl=5, Type=6, Statement=7, 
		Semicolon=8, Lbrace=9, Rbrace=10, Lparen=11, Rparen=12, Comma=13, If=14, 
		Else=15, For=16, While=17, Break=18, Return=19, Read=20, Write=21, Block=22, 
		ActPars=23, Condition=24, CondTerm=25, CondFact=26, Cast=27, Expr=28, 
		Term=29, Factor=30, Designator=31, Ident=32, StringConst=33, CharConst=34, 
		Number=35, Colon=36, Plus=37, Minus=38, Mult=39, Div=40, Mod=41, LogicalAnd=42, 
		LogicalOr=43, QuestionMark=44, PlusEquals=45, PlusPlus=46, MinusMinus=47, 
		DOT=48, MinusEquals=49, MultEquals=50, DivEquals=51, ModEquals=52, Equals=53, 
		NotEquals=54, LogicalNot=55, LessThan=56, GreaterThan=57, LessThanOrEquals=58, 
		GreaterThanOrEquals=59, PLAIN_TEXT=60, NUM=61, ID=62, COMMENT=63, WS=64;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", "Statement", 
		"Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", "Comma", "If", "Else", 
		"For", "While", "Break", "Return", "Read", "Write", "Block", "ActPars", 
		"Condition", "CondTerm", "CondFact", "Cast", "Expr", "Term", "Factor", 
		"Designator", "Ident", "StringConst", "CharConst", "Number", "Colon", 
		"Plus", "Minus", "Mult", "Div", "Mod", "LogicalAnd", "LogicalOr", "QuestionMark", 
		"PlusEquals", "PlusPlus", "MinusMinus", "DOT", "MinusEquals", "MultEquals", 
		"DivEquals", "ModEquals", "Equals", "NotEquals", "LogicalNot", "LessThan", 
		"GreaterThan", "LessThanOrEquals", "GreaterThanOrEquals", "PLAIN_TEXT", 
		"NUM", "ID", "LETTER", "DIGIT", "COMMENT", "WS"
	};


	public MiniCScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'varDecl'", "'classDecl'", "'methodDecl'", 
		"'type'", "'statement'", "';'", "'{'", "'}'", "'('", "')'", "','", "'if'", 
		"'else'", "'for'", "'while'", "'break'", "'return'", "'read'", "'write'", 
		"'block'", "'actPars'", "'condition'", "'condTerm'", "'condFact'", "'cast'", 
		"'expr'", "'term'", "'factor'", "'designator'", "'ident'", "'string'", 
		"'char'", "'number'", "':'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", 
		"'||'", "'?'", "'+='", "'++'", "'--'", "'.'", "'-='", "'*='", "'/='", 
		"'%='", "'=='", "'!='", "'!'", "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", 
		"Statement", "Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", "Comma", 
		"If", "Else", "For", "While", "Break", "Return", "Read", "Write", "Block", 
		"ActPars", "Condition", "CondTerm", "CondFact", "Cast", "Expr", "Term", 
		"Factor", "Designator", "Ident", "StringConst", "CharConst", "Number", 
		"Colon", "Plus", "Minus", "Mult", "Div", "Mod", "LogicalAnd", "LogicalOr", 
		"QuestionMark", "PlusEquals", "PlusPlus", "MinusMinus", "DOT", "MinusEquals", 
		"MultEquals", "DivEquals", "ModEquals", "Equals", "NotEquals", "LogicalNot", 
		"LessThan", "GreaterThan", "LessThanOrEquals", "GreaterThanOrEquals", 
		"PLAIN_TEXT", "NUM", "ID", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,64,451,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
		1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
		1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
		1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,
		1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,
		1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,
		1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,
		1,59,5,59,409,8,59,10,59,12,59,412,9,59,1,59,1,59,1,60,4,60,417,8,60,11,
		60,12,60,418,1,61,1,61,1,61,5,61,424,8,61,10,61,12,61,427,9,61,1,62,3,
		62,430,8,62,1,63,1,63,1,64,1,64,1,64,1,64,5,64,438,8,64,10,64,12,64,441,
		9,64,1,64,1,64,1,65,4,65,446,8,65,11,65,12,65,447,1,65,1,65,0,0,66,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
		79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
		51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
		61,123,62,125,0,127,0,129,63,131,64,1,0,4,2,0,65,90,97,122,1,0,48,57,2,
		0,10,10,13,13,3,0,9,10,13,13,32,32,456,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
		0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
		105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
		115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,
		129,1,0,0,0,0,131,1,0,0,0,1,133,1,0,0,0,3,139,1,0,0,0,5,145,1,0,0,0,7,
		153,1,0,0,0,9,163,1,0,0,0,11,174,1,0,0,0,13,179,1,0,0,0,15,189,1,0,0,0,
		17,191,1,0,0,0,19,193,1,0,0,0,21,195,1,0,0,0,23,197,1,0,0,0,25,199,1,0,
		0,0,27,201,1,0,0,0,29,204,1,0,0,0,31,209,1,0,0,0,33,213,1,0,0,0,35,219,
		1,0,0,0,37,225,1,0,0,0,39,232,1,0,0,0,41,237,1,0,0,0,43,243,1,0,0,0,45,
		249,1,0,0,0,47,257,1,0,0,0,49,267,1,0,0,0,51,276,1,0,0,0,53,285,1,0,0,
		0,55,290,1,0,0,0,57,295,1,0,0,0,59,300,1,0,0,0,61,307,1,0,0,0,63,318,1,
		0,0,0,65,324,1,0,0,0,67,331,1,0,0,0,69,336,1,0,0,0,71,343,1,0,0,0,73,345,
		1,0,0,0,75,347,1,0,0,0,77,349,1,0,0,0,79,351,1,0,0,0,81,353,1,0,0,0,83,
		355,1,0,0,0,85,358,1,0,0,0,87,361,1,0,0,0,89,363,1,0,0,0,91,366,1,0,0,
		0,93,369,1,0,0,0,95,372,1,0,0,0,97,374,1,0,0,0,99,377,1,0,0,0,101,380,
		1,0,0,0,103,383,1,0,0,0,105,386,1,0,0,0,107,389,1,0,0,0,109,392,1,0,0,
		0,111,394,1,0,0,0,113,396,1,0,0,0,115,398,1,0,0,0,117,401,1,0,0,0,119,
		404,1,0,0,0,121,416,1,0,0,0,123,420,1,0,0,0,125,429,1,0,0,0,127,431,1,
		0,0,0,129,433,1,0,0,0,131,445,1,0,0,0,133,134,5,117,0,0,134,135,5,115,
		0,0,135,136,5,105,0,0,136,137,5,110,0,0,137,138,5,103,0,0,138,2,1,0,0,
		0,139,140,5,99,0,0,140,141,5,108,0,0,141,142,5,97,0,0,142,143,5,115,0,
		0,143,144,5,115,0,0,144,4,1,0,0,0,145,146,5,118,0,0,146,147,5,97,0,0,147,
		148,5,114,0,0,148,149,5,68,0,0,149,150,5,101,0,0,150,151,5,99,0,0,151,
		152,5,108,0,0,152,6,1,0,0,0,153,154,5,99,0,0,154,155,5,108,0,0,155,156,
		5,97,0,0,156,157,5,115,0,0,157,158,5,115,0,0,158,159,5,68,0,0,159,160,
		5,101,0,0,160,161,5,99,0,0,161,162,5,108,0,0,162,8,1,0,0,0,163,164,5,109,
		0,0,164,165,5,101,0,0,165,166,5,116,0,0,166,167,5,104,0,0,167,168,5,111,
		0,0,168,169,5,100,0,0,169,170,5,68,0,0,170,171,5,101,0,0,171,172,5,99,
		0,0,172,173,5,108,0,0,173,10,1,0,0,0,174,175,5,116,0,0,175,176,5,121,0,
		0,176,177,5,112,0,0,177,178,5,101,0,0,178,12,1,0,0,0,179,180,5,115,0,0,
		180,181,5,116,0,0,181,182,5,97,0,0,182,183,5,116,0,0,183,184,5,101,0,0,
		184,185,5,109,0,0,185,186,5,101,0,0,186,187,5,110,0,0,187,188,5,116,0,
		0,188,14,1,0,0,0,189,190,5,59,0,0,190,16,1,0,0,0,191,192,5,123,0,0,192,
		18,1,0,0,0,193,194,5,125,0,0,194,20,1,0,0,0,195,196,5,40,0,0,196,22,1,
		0,0,0,197,198,5,41,0,0,198,24,1,0,0,0,199,200,5,44,0,0,200,26,1,0,0,0,
		201,202,5,105,0,0,202,203,5,102,0,0,203,28,1,0,0,0,204,205,5,101,0,0,205,
		206,5,108,0,0,206,207,5,115,0,0,207,208,5,101,0,0,208,30,1,0,0,0,209,210,
		5,102,0,0,210,211,5,111,0,0,211,212,5,114,0,0,212,32,1,0,0,0,213,214,5,
		119,0,0,214,215,5,104,0,0,215,216,5,105,0,0,216,217,5,108,0,0,217,218,
		5,101,0,0,218,34,1,0,0,0,219,220,5,98,0,0,220,221,5,114,0,0,221,222,5,
		101,0,0,222,223,5,97,0,0,223,224,5,107,0,0,224,36,1,0,0,0,225,226,5,114,
		0,0,226,227,5,101,0,0,227,228,5,116,0,0,228,229,5,117,0,0,229,230,5,114,
		0,0,230,231,5,110,0,0,231,38,1,0,0,0,232,233,5,114,0,0,233,234,5,101,0,
		0,234,235,5,97,0,0,235,236,5,100,0,0,236,40,1,0,0,0,237,238,5,119,0,0,
		238,239,5,114,0,0,239,240,5,105,0,0,240,241,5,116,0,0,241,242,5,101,0,
		0,242,42,1,0,0,0,243,244,5,98,0,0,244,245,5,108,0,0,245,246,5,111,0,0,
		246,247,5,99,0,0,247,248,5,107,0,0,248,44,1,0,0,0,249,250,5,97,0,0,250,
		251,5,99,0,0,251,252,5,116,0,0,252,253,5,80,0,0,253,254,5,97,0,0,254,255,
		5,114,0,0,255,256,5,115,0,0,256,46,1,0,0,0,257,258,5,99,0,0,258,259,5,
		111,0,0,259,260,5,110,0,0,260,261,5,100,0,0,261,262,5,105,0,0,262,263,
		5,116,0,0,263,264,5,105,0,0,264,265,5,111,0,0,265,266,5,110,0,0,266,48,
		1,0,0,0,267,268,5,99,0,0,268,269,5,111,0,0,269,270,5,110,0,0,270,271,5,
		100,0,0,271,272,5,84,0,0,272,273,5,101,0,0,273,274,5,114,0,0,274,275,5,
		109,0,0,275,50,1,0,0,0,276,277,5,99,0,0,277,278,5,111,0,0,278,279,5,110,
		0,0,279,280,5,100,0,0,280,281,5,70,0,0,281,282,5,97,0,0,282,283,5,99,0,
		0,283,284,5,116,0,0,284,52,1,0,0,0,285,286,5,99,0,0,286,287,5,97,0,0,287,
		288,5,115,0,0,288,289,5,116,0,0,289,54,1,0,0,0,290,291,5,101,0,0,291,292,
		5,120,0,0,292,293,5,112,0,0,293,294,5,114,0,0,294,56,1,0,0,0,295,296,5,
		116,0,0,296,297,5,101,0,0,297,298,5,114,0,0,298,299,5,109,0,0,299,58,1,
		0,0,0,300,301,5,102,0,0,301,302,5,97,0,0,302,303,5,99,0,0,303,304,5,116,
		0,0,304,305,5,111,0,0,305,306,5,114,0,0,306,60,1,0,0,0,307,308,5,100,0,
		0,308,309,5,101,0,0,309,310,5,115,0,0,310,311,5,105,0,0,311,312,5,103,
		0,0,312,313,5,110,0,0,313,314,5,97,0,0,314,315,5,116,0,0,315,316,5,111,
		0,0,316,317,5,114,0,0,317,62,1,0,0,0,318,319,5,105,0,0,319,320,5,100,0,
		0,320,321,5,101,0,0,321,322,5,110,0,0,322,323,5,116,0,0,323,64,1,0,0,0,
		324,325,5,115,0,0,325,326,5,116,0,0,326,327,5,114,0,0,327,328,5,105,0,
		0,328,329,5,110,0,0,329,330,5,103,0,0,330,66,1,0,0,0,331,332,5,99,0,0,
		332,333,5,104,0,0,333,334,5,97,0,0,334,335,5,114,0,0,335,68,1,0,0,0,336,
		337,5,110,0,0,337,338,5,117,0,0,338,339,5,109,0,0,339,340,5,98,0,0,340,
		341,5,101,0,0,341,342,5,114,0,0,342,70,1,0,0,0,343,344,5,58,0,0,344,72,
		1,0,0,0,345,346,5,43,0,0,346,74,1,0,0,0,347,348,5,45,0,0,348,76,1,0,0,
		0,349,350,5,42,0,0,350,78,1,0,0,0,351,352,5,47,0,0,352,80,1,0,0,0,353,
		354,5,37,0,0,354,82,1,0,0,0,355,356,5,38,0,0,356,357,5,38,0,0,357,84,1,
		0,0,0,358,359,5,124,0,0,359,360,5,124,0,0,360,86,1,0,0,0,361,362,5,63,
		0,0,362,88,1,0,0,0,363,364,5,43,0,0,364,365,5,61,0,0,365,90,1,0,0,0,366,
		367,5,43,0,0,367,368,5,43,0,0,368,92,1,0,0,0,369,370,5,45,0,0,370,371,
		5,45,0,0,371,94,1,0,0,0,372,373,5,46,0,0,373,96,1,0,0,0,374,375,5,45,0,
		0,375,376,5,61,0,0,376,98,1,0,0,0,377,378,5,42,0,0,378,379,5,61,0,0,379,
		100,1,0,0,0,380,381,5,47,0,0,381,382,5,61,0,0,382,102,1,0,0,0,383,384,
		5,37,0,0,384,385,5,61,0,0,385,104,1,0,0,0,386,387,5,61,0,0,387,388,5,61,
		0,0,388,106,1,0,0,0,389,390,5,33,0,0,390,391,5,61,0,0,391,108,1,0,0,0,
		392,393,5,33,0,0,393,110,1,0,0,0,394,395,5,60,0,0,395,112,1,0,0,0,396,
		397,5,62,0,0,397,114,1,0,0,0,398,399,5,60,0,0,399,400,5,61,0,0,400,116,
		1,0,0,0,401,402,5,62,0,0,402,403,5,61,0,0,403,118,1,0,0,0,404,410,5,34,
		0,0,405,409,3,125,62,0,406,409,3,127,63,0,407,409,3,131,65,0,408,405,1,
		0,0,0,408,406,1,0,0,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,
		410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,5,34,0,0,414,120,
		1,0,0,0,415,417,3,127,63,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,
		0,0,418,419,1,0,0,0,419,122,1,0,0,0,420,425,3,125,62,0,421,424,3,125,62,
		0,422,424,3,127,63,0,423,421,1,0,0,0,423,422,1,0,0,0,424,427,1,0,0,0,425,
		423,1,0,0,0,425,426,1,0,0,0,426,124,1,0,0,0,427,425,1,0,0,0,428,430,7,
		0,0,0,429,428,1,0,0,0,430,126,1,0,0,0,431,432,7,1,0,0,432,128,1,0,0,0,
		433,434,5,47,0,0,434,435,5,47,0,0,435,439,1,0,0,0,436,438,8,2,0,0,437,
		436,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,
		0,0,0,441,439,1,0,0,0,442,443,6,64,0,0,443,130,1,0,0,0,444,446,7,3,0,0,
		445,444,1,0,0,0,446,447,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,449,
		1,0,0,0,449,450,6,65,0,0,450,132,1,0,0,0,9,0,408,410,418,423,425,429,439,
		447,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen
