//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/kosti/RiderProjects/AvaloniaApplication5/AvaloniaApplication5/MiniCScanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Using=1, Class=2, VarDecl=3, ClassDecl=4, MethodDecl=5, Type=6, Statement=7, 
		Semicolon=8, Lbrace=9, Rbrace=10, Lparen=11, Rparen=12, Comma=13, If=14, 
		Else=15, For=16, While=17, Break=18, Return=19, Read=20, Write=21, ActPars=22, 
		Condition=23, CondTerm=24, CondFact=25, Cast=26, Expr=27, Term=28, Factor=29, 
		Designator=30, StringConst=31, CharConst=32, Number=33, Colon=34, Plus=35, 
		Minus=36, Mult=37, Div=38, Mod=39, LogicalAnd=40, LogicalOr=41, QuestionMark=42, 
		PlusEquals=43, PlusPlus=44, MinusMinus=45, DOT=46, Assign=47, MinusEquals=48, 
		MultEquals=49, DivEquals=50, ModEquals=51, Equals=52, NotEquals=53, LogicalNot=54, 
		LessThan=55, GreaterThan=56, LessThanOrEquals=57, GreaterThanOrEquals=58, 
		PLAIN_TEXT=59, NUM=60, ID=61, COMMENT=62, WS=63;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", "Statement", 
		"Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", "Comma", "If", "Else", 
		"For", "While", "Break", "Return", "Read", "Write", "ActPars", "Condition", 
		"CondTerm", "CondFact", "Cast", "Expr", "Term", "Factor", "Designator", 
		"StringConst", "CharConst", "Number", "Colon", "Plus", "Minus", "Mult", 
		"Div", "Mod", "LogicalAnd", "LogicalOr", "QuestionMark", "PlusEquals", 
		"PlusPlus", "MinusMinus", "DOT", "Assign", "MinusEquals", "MultEquals", 
		"DivEquals", "ModEquals", "Equals", "NotEquals", "LogicalNot", "LessThan", 
		"GreaterThan", "LessThanOrEquals", "GreaterThanOrEquals", "PLAIN_TEXT", 
		"NUM", "ID", "LETTER", "DIGIT", "COMMENT", "WS"
	};


	public MiniCScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'varDecl'", "'classDecl'", "'methodDecl'", 
		"'type'", "'statement'", "';'", "'{'", "'}'", "'('", "')'", "','", "'if'", 
		"'else'", "'for'", "'while'", "'break'", "'return'", "'read'", "'write'", 
		"'actPars'", "'condition'", "'condTerm'", "'condFact'", "'cast'", "'expr'", 
		"'term'", "'factor'", "'designator'", "'string'", "'char'", "'number'", 
		"':'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'?'", "'+='", 
		"'++'", "'--'", "'.'", "'='", "'-='", "'*='", "'/='", "'%='", "'=='", 
		"'!='", "'!'", "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", 
		"Statement", "Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", "Comma", 
		"If", "Else", "For", "While", "Break", "Return", "Read", "Write", "ActPars", 
		"Condition", "CondTerm", "CondFact", "Cast", "Expr", "Term", "Factor", 
		"Designator", "StringConst", "CharConst", "Number", "Colon", "Plus", "Minus", 
		"Mult", "Div", "Mod", "LogicalAnd", "LogicalOr", "QuestionMark", "PlusEquals", 
		"PlusPlus", "MinusMinus", "DOT", "Assign", "MinusEquals", "MultEquals", 
		"DivEquals", "ModEquals", "Equals", "NotEquals", "LogicalNot", "LessThan", 
		"GreaterThan", "LessThanOrEquals", "GreaterThanOrEquals", "PLAIN_TEXT", 
		"NUM", "ID", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,63,439,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
		1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
		1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
		1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,
		1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,
		1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
		1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,
		1,58,1,58,1,58,5,58,397,8,58,10,58,12,58,400,9,58,1,58,1,58,1,59,4,59,
		405,8,59,11,59,12,59,406,1,60,1,60,1,60,5,60,412,8,60,10,60,12,60,415,
		9,60,1,61,3,61,418,8,61,1,62,1,62,1,63,1,63,1,63,1,63,5,63,426,8,63,10,
		63,12,63,429,9,63,1,63,1,63,1,64,4,64,434,8,64,11,64,12,64,435,1,64,1,
		64,0,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
		37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
		49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,
		119,60,121,61,123,0,125,0,127,62,129,63,1,0,4,2,0,65,90,97,122,1,0,48,
		57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,444,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
		0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,127,1,0,
		0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,137,1,0,0,0,5,143,1,0,0,0,7,151,1,0,
		0,0,9,161,1,0,0,0,11,172,1,0,0,0,13,177,1,0,0,0,15,187,1,0,0,0,17,189,
		1,0,0,0,19,191,1,0,0,0,21,193,1,0,0,0,23,195,1,0,0,0,25,197,1,0,0,0,27,
		199,1,0,0,0,29,202,1,0,0,0,31,207,1,0,0,0,33,211,1,0,0,0,35,217,1,0,0,
		0,37,223,1,0,0,0,39,230,1,0,0,0,41,235,1,0,0,0,43,241,1,0,0,0,45,249,1,
		0,0,0,47,259,1,0,0,0,49,268,1,0,0,0,51,277,1,0,0,0,53,282,1,0,0,0,55,287,
		1,0,0,0,57,292,1,0,0,0,59,299,1,0,0,0,61,310,1,0,0,0,63,317,1,0,0,0,65,
		322,1,0,0,0,67,329,1,0,0,0,69,331,1,0,0,0,71,333,1,0,0,0,73,335,1,0,0,
		0,75,337,1,0,0,0,77,339,1,0,0,0,79,341,1,0,0,0,81,344,1,0,0,0,83,347,1,
		0,0,0,85,349,1,0,0,0,87,352,1,0,0,0,89,355,1,0,0,0,91,358,1,0,0,0,93,360,
		1,0,0,0,95,362,1,0,0,0,97,365,1,0,0,0,99,368,1,0,0,0,101,371,1,0,0,0,103,
		374,1,0,0,0,105,377,1,0,0,0,107,380,1,0,0,0,109,382,1,0,0,0,111,384,1,
		0,0,0,113,386,1,0,0,0,115,389,1,0,0,0,117,392,1,0,0,0,119,404,1,0,0,0,
		121,408,1,0,0,0,123,417,1,0,0,0,125,419,1,0,0,0,127,421,1,0,0,0,129,433,
		1,0,0,0,131,132,5,117,0,0,132,133,5,115,0,0,133,134,5,105,0,0,134,135,
		5,110,0,0,135,136,5,103,0,0,136,2,1,0,0,0,137,138,5,99,0,0,138,139,5,108,
		0,0,139,140,5,97,0,0,140,141,5,115,0,0,141,142,5,115,0,0,142,4,1,0,0,0,
		143,144,5,118,0,0,144,145,5,97,0,0,145,146,5,114,0,0,146,147,5,68,0,0,
		147,148,5,101,0,0,148,149,5,99,0,0,149,150,5,108,0,0,150,6,1,0,0,0,151,
		152,5,99,0,0,152,153,5,108,0,0,153,154,5,97,0,0,154,155,5,115,0,0,155,
		156,5,115,0,0,156,157,5,68,0,0,157,158,5,101,0,0,158,159,5,99,0,0,159,
		160,5,108,0,0,160,8,1,0,0,0,161,162,5,109,0,0,162,163,5,101,0,0,163,164,
		5,116,0,0,164,165,5,104,0,0,165,166,5,111,0,0,166,167,5,100,0,0,167,168,
		5,68,0,0,168,169,5,101,0,0,169,170,5,99,0,0,170,171,5,108,0,0,171,10,1,
		0,0,0,172,173,5,116,0,0,173,174,5,121,0,0,174,175,5,112,0,0,175,176,5,
		101,0,0,176,12,1,0,0,0,177,178,5,115,0,0,178,179,5,116,0,0,179,180,5,97,
		0,0,180,181,5,116,0,0,181,182,5,101,0,0,182,183,5,109,0,0,183,184,5,101,
		0,0,184,185,5,110,0,0,185,186,5,116,0,0,186,14,1,0,0,0,187,188,5,59,0,
		0,188,16,1,0,0,0,189,190,5,123,0,0,190,18,1,0,0,0,191,192,5,125,0,0,192,
		20,1,0,0,0,193,194,5,40,0,0,194,22,1,0,0,0,195,196,5,41,0,0,196,24,1,0,
		0,0,197,198,5,44,0,0,198,26,1,0,0,0,199,200,5,105,0,0,200,201,5,102,0,
		0,201,28,1,0,0,0,202,203,5,101,0,0,203,204,5,108,0,0,204,205,5,115,0,0,
		205,206,5,101,0,0,206,30,1,0,0,0,207,208,5,102,0,0,208,209,5,111,0,0,209,
		210,5,114,0,0,210,32,1,0,0,0,211,212,5,119,0,0,212,213,5,104,0,0,213,214,
		5,105,0,0,214,215,5,108,0,0,215,216,5,101,0,0,216,34,1,0,0,0,217,218,5,
		98,0,0,218,219,5,114,0,0,219,220,5,101,0,0,220,221,5,97,0,0,221,222,5,
		107,0,0,222,36,1,0,0,0,223,224,5,114,0,0,224,225,5,101,0,0,225,226,5,116,
		0,0,226,227,5,117,0,0,227,228,5,114,0,0,228,229,5,110,0,0,229,38,1,0,0,
		0,230,231,5,114,0,0,231,232,5,101,0,0,232,233,5,97,0,0,233,234,5,100,0,
		0,234,40,1,0,0,0,235,236,5,119,0,0,236,237,5,114,0,0,237,238,5,105,0,0,
		238,239,5,116,0,0,239,240,5,101,0,0,240,42,1,0,0,0,241,242,5,97,0,0,242,
		243,5,99,0,0,243,244,5,116,0,0,244,245,5,80,0,0,245,246,5,97,0,0,246,247,
		5,114,0,0,247,248,5,115,0,0,248,44,1,0,0,0,249,250,5,99,0,0,250,251,5,
		111,0,0,251,252,5,110,0,0,252,253,5,100,0,0,253,254,5,105,0,0,254,255,
		5,116,0,0,255,256,5,105,0,0,256,257,5,111,0,0,257,258,5,110,0,0,258,46,
		1,0,0,0,259,260,5,99,0,0,260,261,5,111,0,0,261,262,5,110,0,0,262,263,5,
		100,0,0,263,264,5,84,0,0,264,265,5,101,0,0,265,266,5,114,0,0,266,267,5,
		109,0,0,267,48,1,0,0,0,268,269,5,99,0,0,269,270,5,111,0,0,270,271,5,110,
		0,0,271,272,5,100,0,0,272,273,5,70,0,0,273,274,5,97,0,0,274,275,5,99,0,
		0,275,276,5,116,0,0,276,50,1,0,0,0,277,278,5,99,0,0,278,279,5,97,0,0,279,
		280,5,115,0,0,280,281,5,116,0,0,281,52,1,0,0,0,282,283,5,101,0,0,283,284,
		5,120,0,0,284,285,5,112,0,0,285,286,5,114,0,0,286,54,1,0,0,0,287,288,5,
		116,0,0,288,289,5,101,0,0,289,290,5,114,0,0,290,291,5,109,0,0,291,56,1,
		0,0,0,292,293,5,102,0,0,293,294,5,97,0,0,294,295,5,99,0,0,295,296,5,116,
		0,0,296,297,5,111,0,0,297,298,5,114,0,0,298,58,1,0,0,0,299,300,5,100,0,
		0,300,301,5,101,0,0,301,302,5,115,0,0,302,303,5,105,0,0,303,304,5,103,
		0,0,304,305,5,110,0,0,305,306,5,97,0,0,306,307,5,116,0,0,307,308,5,111,
		0,0,308,309,5,114,0,0,309,60,1,0,0,0,310,311,5,115,0,0,311,312,5,116,0,
		0,312,313,5,114,0,0,313,314,5,105,0,0,314,315,5,110,0,0,315,316,5,103,
		0,0,316,62,1,0,0,0,317,318,5,99,0,0,318,319,5,104,0,0,319,320,5,97,0,0,
		320,321,5,114,0,0,321,64,1,0,0,0,322,323,5,110,0,0,323,324,5,117,0,0,324,
		325,5,109,0,0,325,326,5,98,0,0,326,327,5,101,0,0,327,328,5,114,0,0,328,
		66,1,0,0,0,329,330,5,58,0,0,330,68,1,0,0,0,331,332,5,43,0,0,332,70,1,0,
		0,0,333,334,5,45,0,0,334,72,1,0,0,0,335,336,5,42,0,0,336,74,1,0,0,0,337,
		338,5,47,0,0,338,76,1,0,0,0,339,340,5,37,0,0,340,78,1,0,0,0,341,342,5,
		38,0,0,342,343,5,38,0,0,343,80,1,0,0,0,344,345,5,124,0,0,345,346,5,124,
		0,0,346,82,1,0,0,0,347,348,5,63,0,0,348,84,1,0,0,0,349,350,5,43,0,0,350,
		351,5,61,0,0,351,86,1,0,0,0,352,353,5,43,0,0,353,354,5,43,0,0,354,88,1,
		0,0,0,355,356,5,45,0,0,356,357,5,45,0,0,357,90,1,0,0,0,358,359,5,46,0,
		0,359,92,1,0,0,0,360,361,5,61,0,0,361,94,1,0,0,0,362,363,5,45,0,0,363,
		364,5,61,0,0,364,96,1,0,0,0,365,366,5,42,0,0,366,367,5,61,0,0,367,98,1,
		0,0,0,368,369,5,47,0,0,369,370,5,61,0,0,370,100,1,0,0,0,371,372,5,37,0,
		0,372,373,5,61,0,0,373,102,1,0,0,0,374,375,5,61,0,0,375,376,5,61,0,0,376,
		104,1,0,0,0,377,378,5,33,0,0,378,379,5,61,0,0,379,106,1,0,0,0,380,381,
		5,33,0,0,381,108,1,0,0,0,382,383,5,60,0,0,383,110,1,0,0,0,384,385,5,62,
		0,0,385,112,1,0,0,0,386,387,5,60,0,0,387,388,5,61,0,0,388,114,1,0,0,0,
		389,390,5,62,0,0,390,391,5,61,0,0,391,116,1,0,0,0,392,398,5,34,0,0,393,
		397,3,123,61,0,394,397,3,125,62,0,395,397,3,129,64,0,396,393,1,0,0,0,396,
		394,1,0,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,
		0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,5,34,0,0,402,118,1,0,0,0,
		403,405,3,125,62,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,
		407,1,0,0,0,407,120,1,0,0,0,408,413,3,123,61,0,409,412,3,123,61,0,410,
		412,3,125,62,0,411,409,1,0,0,0,411,410,1,0,0,0,412,415,1,0,0,0,413,411,
		1,0,0,0,413,414,1,0,0,0,414,122,1,0,0,0,415,413,1,0,0,0,416,418,7,0,0,
		0,417,416,1,0,0,0,418,124,1,0,0,0,419,420,7,1,0,0,420,126,1,0,0,0,421,
		422,5,47,0,0,422,423,5,47,0,0,423,427,1,0,0,0,424,426,8,2,0,0,425,424,
		1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,
		0,429,427,1,0,0,0,430,431,6,63,0,0,431,128,1,0,0,0,432,434,7,3,0,0,433,
		432,1,0,0,0,434,435,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,437,1,
		0,0,0,437,438,6,64,0,0,438,130,1,0,0,0,9,0,396,398,406,411,413,417,427,
		435,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen
