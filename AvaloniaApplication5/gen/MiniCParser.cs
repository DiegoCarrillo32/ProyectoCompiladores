//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/kosti/RiderProjects/AvaloniaApplication5/AvaloniaApplication5/MiniCParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Using=1, Class=2, VarDecl=3, ClassDecl=4, MethodDecl=5, Type=6, Statement=7, 
		Semicolon=8, Lbrace=9, Rbrace=10, Lparen=11, Rparen=12, Comma=13, If=14, 
		Else=15, For=16, While=17, Break=18, Return=19, Read=20, Write=21, ActPars=22, 
		Condition=23, CondTerm=24, CondFact=25, Cast=26, Expr=27, Term=28, Factor=29, 
		Designator=30, StringConst=31, CharConst=32, Number=33, Colon=34, Plus=35, 
		Minus=36, Mult=37, Div=38, Mod=39, LogicalAnd=40, LogicalOr=41, QuestionMark=42, 
		PlusEquals=43, PlusPlus=44, MinusMinus=45, DOT=46, Assign=47, MinusEquals=48, 
		MultEquals=49, DivEquals=50, ModEquals=51, Equals=52, NotEquals=53, LogicalNot=54, 
		LessThan=55, GreaterThan=56, LessThanOrEquals=57, GreaterThanOrEquals=58, 
		PLAIN_TEXT=59, NUM=60, ID=61, COMMENT=62, WS=63;
	public const int
		RULE_program = 0, RULE_usingDeclaration = 1, RULE_classDeclaration = 2, 
		RULE_memberDeclaration = 3, RULE_varDeclaration = 4, RULE_methodDeclaration = 5, 
		RULE_parameterList = 6, RULE_parameter = 7, RULE_type = 8, RULE_block = 9, 
		RULE_statement = 10, RULE_ifStatement = 11, RULE_whileStatement = 12, 
		RULE_forStatement = 13, RULE_forControl = 14, RULE_returnStatement = 15, 
		RULE_readStatement = 16, RULE_writeStatement = 17, RULE_expressionStatement = 18, 
		RULE_expression = 19, RULE_assignmentExpression = 20, RULE_assignmentOperator = 21, 
		RULE_conditionalExpression = 22, RULE_logicalOrExpression = 23, RULE_logicalAndExpression = 24, 
		RULE_equalityExpression = 25, RULE_relationalExpression = 26, RULE_additiveExpression = 27, 
		RULE_multiplicativeExpression = 28, RULE_castExpression = 29, RULE_unaryExpression = 30, 
		RULE_postfixExpression = 31, RULE_argumentList = 32, RULE_primaryExpression = 33, 
		RULE_designator = 34, RULE_methodInvocation = 35, RULE_number = 36, RULE_charConst = 37, 
		RULE_unaryOperator = 38;
	public static readonly string[] ruleNames = {
		"program", "usingDeclaration", "classDeclaration", "memberDeclaration", 
		"varDeclaration", "methodDeclaration", "parameterList", "parameter", "type", 
		"block", "statement", "ifStatement", "whileStatement", "forStatement", 
		"forControl", "returnStatement", "readStatement", "writeStatement", "expressionStatement", 
		"expression", "assignmentExpression", "assignmentOperator", "conditionalExpression", 
		"logicalOrExpression", "logicalAndExpression", "equalityExpression", "relationalExpression", 
		"additiveExpression", "multiplicativeExpression", "castExpression", "unaryExpression", 
		"postfixExpression", "argumentList", "primaryExpression", "designator", 
		"methodInvocation", "number", "charConst", "unaryOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'varDecl'", "'classDecl'", "'methodDecl'", 
		"'type'", "'statement'", "';'", "'{'", "'}'", "'('", "')'", "','", "'if'", 
		"'else'", "'for'", "'while'", "'break'", "'return'", "'read'", "'write'", 
		"'actPars'", "'condition'", "'condTerm'", "'condFact'", "'cast'", "'expr'", 
		"'term'", "'factor'", "'designator'", "'string'", "'char'", "'number'", 
		"':'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'?'", "'+='", 
		"'++'", "'--'", "'.'", "'='", "'-='", "'*='", "'/='", "'%='", "'=='", 
		"'!='", "'!'", "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", 
		"Statement", "Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", "Comma", 
		"If", "Else", "For", "While", "Break", "Return", "Read", "Write", "ActPars", 
		"Condition", "CondTerm", "CondFact", "Cast", "Expr", "Term", "Factor", 
		"Designator", "StringConst", "CharConst", "Number", "Colon", "Plus", "Minus", 
		"Mult", "Div", "Mod", "LogicalAnd", "LogicalOr", "QuestionMark", "PlusEquals", 
		"PlusPlus", "MinusMinus", "DOT", "Assign", "MinusEquals", "MultEquals", 
		"DivEquals", "ModEquals", "Equals", "NotEquals", "LogicalNot", "LessThan", 
		"GreaterThan", "LessThanOrEquals", "GreaterThanOrEquals", "PLAIN_TEXT", 
		"NUM", "ID", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Using) {
				{
				State = 78;
				usingDeclaration();
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Class) {
				{
				{
				State = 81;
				classDeclaration();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 87;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(MiniCParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(Using);
			State = 90;
			Match(ID);
			State = 91;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MiniCParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(Class);
			State = 94;
			Match(ID);
			State = 95;
			Match(Lbrace);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 44L) != 0) {
				{
				{
				State = 96;
				memberDeclaration();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_memberDeclaration);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VarDecl:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				varDeclaration();
				}
				break;
			case MethodDecl:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				methodDeclaration();
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				classDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VarDecl() { return GetToken(MiniCParser.VarDecl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(MiniCParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(MiniCParser.NUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(VarDecl);
			State = 110;
			type();
			State = 111;
			Match(ID);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Lbrace) {
				{
				{
				State = 112;
				Match(Lbrace);
				State = 113;
				Match(NUM);
				State = 114;
				Match(Rbrace);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MethodDecl() { return GetToken(MiniCParser.MethodDecl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(MethodDecl);
			State = 123;
			type();
			State = 124;
			Match(ID);
			State = 125;
			Match(Lparen);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Type || _la==ID) {
				{
				State = 126;
				parameterList();
				}
			}

			State = 129;
			Match(Rparen);
			State = 130;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			parameter();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 133;
				Match(Comma);
				State = 134;
				parameter();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			type();
			State = 141;
			Match(ID);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Lbrace) {
				{
				{
				State = 142;
				Match(Lbrace);
				State = 143;
				Match(Rbrace);
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(MiniCParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = TokenStream.LA(1);
			if ( !(_la==Type || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(Lbrace);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4053292548569647872L) != 0) {
				{
				{
				State = 152;
				statement();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MiniCParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MiniCParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MiniCParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadStatementContext readStatement() {
			return GetRuleContext<ReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteStatementContext writeStatement() {
			return GetRuleContext<WriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		int _la;
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				designator();
				State = 170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Assign:
					{
					State = 161;
					Match(Assign);
					State = 162;
					expression();
					}
					break;
				case Lparen:
					{
					State = 163;
					Match(Lparen);
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4053292548565764096L) != 0) {
						{
						State = 164;
						argumentList();
						}
					}

					State = 167;
					Match(Rparen);
					}
					break;
				case PlusPlus:
					{
					State = 168;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 169;
					Match(MinusMinus);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175;
				forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 176;
				returnStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 177;
				readStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 178;
				writeStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 179;
				expressionStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 180;
				Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MiniCParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MiniCParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(If);
			State = 184;
			Match(Lparen);
			State = 185;
			expression();
			State = 186;
			Match(Rparen);
			State = 187;
			statement();
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 188;
				Match(Else);
				State = 189;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MiniCParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(While);
			State = 193;
			Match(Lparen);
			State = 194;
			expression();
			State = 195;
			Match(Rparen);
			State = 196;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MiniCParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(For);
			State = 199;
			Match(Lparen);
			State = 200;
			forControl();
			State = 201;
			Match(Rparen);
			State = 202;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 28, RULE_forControl);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VarDecl:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				varDeclaration();
				}
				break;
			case Lparen:
			case CharConst:
			case Plus:
			case Minus:
			case PlusPlus:
			case MinusMinus:
			case LogicalNot:
			case PLAIN_TEXT:
			case NUM:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				expressionStatement();
				}
				break;
			case Rparen:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MiniCParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Return);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4053292548565764096L) != 0) {
				{
				State = 210;
				expression();
				}
			}

			State = 213;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MiniCParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStatement; } }
	}

	[RuleVersion(0)]
	public ReadStatementContext readStatement() {
		ReadStatementContext _localctx = new ReadStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_readStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(Read);
			State = 216;
			Match(Lparen);
			State = 217;
			designator();
			State = 218;
			Match(Rparen);
			State = 219;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(MiniCParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLAIN_TEXT() { return GetTokens(MiniCParser.PLAIN_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT(int i) {
			return GetToken(MiniCParser.PLAIN_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public WriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStatement; } }
	}

	[RuleVersion(0)]
	public WriteStatementContext writeStatement() {
		WriteStatementContext _localctx = new WriteStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_writeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(Write);
			State = 222;
			Match(Lparen);
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 223;
				expression();
				}
				break;
			case 2:
				{
				State = 224;
				Match(PLAIN_TEXT);
				}
				break;
			}
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==PLAIN_TEXT) {
				{
				State = 230;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Comma:
					{
					State = 227;
					Match(Comma);
					State = 228;
					expression();
					}
					break;
				case PLAIN_TEXT:
					{
					State = 229;
					Match(PLAIN_TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			Match(Rparen);
			State = 236;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			expression();
			State = 239;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext[] conditionalExpression() {
			return GetRuleContexts<ConditionalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression(int i) {
			return GetRuleContext<ConditionalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			conditionalExpression();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8734520371052544L) != 0) {
				{
				State = 244;
				assignmentOperator();
				State = 245;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(MiniCParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusEquals() { return GetToken(MiniCParser.PlusEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusEquals() { return GetToken(MiniCParser.MinusEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultEquals() { return GetToken(MiniCParser.MultEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivEquals() { return GetToken(MiniCParser.DivEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModEquals() { return GetToken(MiniCParser.ModEquals, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8734520371052544L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MiniCParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MiniCParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			logicalOrExpression();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 252;
				Match(QuestionMark);
				State = 253;
				expression();
				State = 254;
				Match(Colon);
				State = 255;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalOr() { return GetTokens(MiniCParser.LogicalOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr(int i) {
			return GetToken(MiniCParser.LogicalOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			logicalAndExpression();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalOr) {
				{
				{
				State = 260;
				Match(LogicalOr);
				State = 261;
				logicalAndExpression();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalAnd() { return GetTokens(MiniCParser.LogicalAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd(int i) {
			return GetToken(MiniCParser.LogicalAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			equalityExpression();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalAnd) {
				{
				{
				State = 268;
				Match(LogicalAnd);
				State = 269;
				equalityExpression();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(MiniCParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(MiniCParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEquals() { return GetTokens(MiniCParser.NotEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals(int i) {
			return GetToken(MiniCParser.NotEquals, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_equalityExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			relationalExpression();
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 276;
					_la = TokenStream.LA(1);
					if ( !(_la==Equals || _la==NotEquals) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 277;
					relationalExpression();
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThan() { return GetTokens(MiniCParser.LessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan(int i) {
			return GetToken(MiniCParser.LessThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThanOrEquals() { return GetTokens(MiniCParser.LessThanOrEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEquals(int i) {
			return GetToken(MiniCParser.LessThanOrEquals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterThan() { return GetTokens(MiniCParser.GreaterThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan(int i) {
			return GetToken(MiniCParser.GreaterThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterThanOrEquals() { return GetTokens(MiniCParser.GreaterThanOrEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEquals(int i) {
			return GetToken(MiniCParser.GreaterThanOrEquals, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			additiveExpression();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 540431955284459520L) != 0) {
				{
				{
				State = 284;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 540431955284459520L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 285;
				additiveExpression();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(MiniCParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(MiniCParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(MiniCParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(MiniCParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_additiveExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			multiplicativeExpression();
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 292;
					_la = TokenStream.LA(1);
					if ( !(_la==Plus || _la==Minus) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 293;
					multiplicativeExpression();
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mult() { return GetTokens(MiniCParser.Mult); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mult(int i) {
			return GetToken(MiniCParser.Mult, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(MiniCParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(MiniCParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(MiniCParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(MiniCParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			castExpression();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0) {
				{
				{
				State = 300;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 301;
				castExpression();
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_castExpression);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				Match(Lparen);
				State = 309;
				type();
				State = 310;
				Match(Rparen);
				State = 311;
				castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MiniCParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MiniCParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_unaryExpression);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lparen:
			case CharConst:
			case PLAIN_TEXT:
			case NUM:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315;
				postfixExpression();
				}
				break;
			case PlusPlus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316;
				Match(PlusPlus);
				State = 317;
				unaryExpression();
				}
				break;
			case MinusMinus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318;
				Match(MinusMinus);
				State = 319;
				unaryExpression();
				}
				break;
			case Plus:
			case Minus:
			case LogicalNot:
				EnterOuterAlt(_localctx, 4);
				{
				State = 320;
				unaryOperator();
				State = 321;
				castExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lparen() { return GetTokens(MiniCParser.Lparen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen(int i) {
			return GetToken(MiniCParser.Lparen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rparen() { return GetTokens(MiniCParser.Rparen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen(int i) {
			return GetToken(MiniCParser.Rparen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(MiniCParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(MiniCParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(MiniCParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(MiniCParser.MinusMinus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_postfixExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			primaryExpression();
			State = 341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 339;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Lbrace:
						{
						State = 326;
						Match(Lbrace);
						State = 327;
						expression();
						State = 328;
						Match(Rbrace);
						}
						break;
					case Lparen:
						{
						State = 330;
						Match(Lparen);
						State = 332;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4053292548565764096L) != 0) {
							{
							State = 331;
							argumentList();
							}
						}

						State = 334;
						Match(Rparen);
						}
						break;
					case DOT:
						{
						State = 335;
						Match(DOT);
						State = 336;
						Match(ID);
						}
						break;
					case PlusPlus:
						{
						State = 337;
						Match(PlusPlus);
						}
						break;
					case MinusMinus:
						{
						State = 338;
						Match(MinusMinus);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 64, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			expression();
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 345;
				Match(Comma);
				State = 346;
				expression();
				}
				}
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharConstContext charConst() {
			return GetRuleContext<CharConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT() { return GetToken(MiniCParser.PLAIN_TEXT, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_primaryExpression);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				designator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				methodInvocation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				Match(Lparen);
				State = 355;
				expression();
				State = 356;
				Match(Rparen);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 358;
				Match(ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 359;
				number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 360;
				charConst();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 361;
				Match(PLAIN_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCParser.DOT, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_designator);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(ID);
			State = 373;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 371;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Lbrace:
						{
						State = 365;
						Match(Lbrace);
						State = 366;
						expression();
						State = 367;
						Match(Rbrace);
						}
						break;
					case DOT:
						{
						State = 369;
						Match(DOT);
						State = 370;
						Match(ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 70, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(ID);
			State = 377;
			Match(Lparen);
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4053292548565764096L) != 0) {
				{
				State = 378;
				argumentList();
				}
			}

			State = 381;
			Match(Rparen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MiniCParser.NUM, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 72, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharConst() { return GetToken(MiniCParser.CharConst, 0); }
		public CharConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charConst; } }
	}

	[RuleVersion(0)]
	public CharConstContext charConst() {
		CharConstContext _localctx = new CharConstContext(Context, State);
		EnterRule(_localctx, 74, RULE_charConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(CharConst);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MiniCParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MiniCParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalNot() { return GetToken(MiniCParser.LogicalNot, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 18014501588697088L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,63,390,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,3,0,80,8,0,1,0,5,0,83,8,0,10,0,12,0,
		86,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,98,8,2,10,2,12,2,101,
		9,2,1,2,1,2,1,3,1,3,1,3,3,3,108,8,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,116,8,
		4,10,4,12,4,119,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,128,8,5,1,5,1,5,1,
		5,1,6,1,6,1,6,5,6,136,8,6,10,6,12,6,139,9,6,1,7,1,7,1,7,1,7,5,7,145,8,
		7,10,7,12,7,148,9,7,1,8,1,8,1,9,1,9,5,9,154,8,9,10,9,12,9,157,9,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,10,3,10,166,8,10,1,10,1,10,1,10,3,10,171,8,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,182,8,10,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,3,11,191,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,208,8,14,1,15,1,15,3,15,212,
		8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,
		226,8,17,1,17,1,17,1,17,5,17,231,8,17,10,17,12,17,234,9,17,1,17,1,17,1,
		17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,248,8,20,1,21,1,21,
		1,22,1,22,1,22,1,22,1,22,1,22,3,22,258,8,22,1,23,1,23,1,23,5,23,263,8,
		23,10,23,12,23,266,9,23,1,24,1,24,1,24,5,24,271,8,24,10,24,12,24,274,9,
		24,1,25,1,25,1,25,5,25,279,8,25,10,25,12,25,282,9,25,1,26,1,26,1,26,5,
		26,287,8,26,10,26,12,26,290,9,26,1,27,1,27,1,27,5,27,295,8,27,10,27,12,
		27,298,9,27,1,28,1,28,1,28,5,28,303,8,28,10,28,12,28,306,9,28,1,29,1,29,
		1,29,1,29,1,29,1,29,3,29,314,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,3,30,324,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,333,8,31,1,31,
		1,31,1,31,1,31,1,31,5,31,340,8,31,10,31,12,31,343,9,31,1,32,1,32,1,32,
		5,32,348,8,32,10,32,12,32,351,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,3,33,363,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,372,
		8,34,10,34,12,34,375,9,34,1,35,1,35,1,35,3,35,380,8,35,1,35,1,35,1,36,
		1,36,1,37,1,37,1,38,1,38,1,38,0,0,39,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,0,7,2,0,6,6,61,61,2,0,43,43,48,52,1,0,52,53,1,0,55,58,1,0,35,36,
		1,0,37,39,2,0,35,36,54,54,408,0,79,1,0,0,0,2,89,1,0,0,0,4,93,1,0,0,0,6,
		107,1,0,0,0,8,109,1,0,0,0,10,122,1,0,0,0,12,132,1,0,0,0,14,140,1,0,0,0,
		16,149,1,0,0,0,18,151,1,0,0,0,20,181,1,0,0,0,22,183,1,0,0,0,24,192,1,0,
		0,0,26,198,1,0,0,0,28,207,1,0,0,0,30,209,1,0,0,0,32,215,1,0,0,0,34,221,
		1,0,0,0,36,238,1,0,0,0,38,241,1,0,0,0,40,243,1,0,0,0,42,249,1,0,0,0,44,
		251,1,0,0,0,46,259,1,0,0,0,48,267,1,0,0,0,50,275,1,0,0,0,52,283,1,0,0,
		0,54,291,1,0,0,0,56,299,1,0,0,0,58,313,1,0,0,0,60,323,1,0,0,0,62,325,1,
		0,0,0,64,344,1,0,0,0,66,362,1,0,0,0,68,364,1,0,0,0,70,376,1,0,0,0,72,383,
		1,0,0,0,74,385,1,0,0,0,76,387,1,0,0,0,78,80,3,2,1,0,79,78,1,0,0,0,79,80,
		1,0,0,0,80,84,1,0,0,0,81,83,3,4,2,0,82,81,1,0,0,0,83,86,1,0,0,0,84,82,
		1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,84,1,0,0,0,87,88,5,0,0,1,88,1,1,
		0,0,0,89,90,5,1,0,0,90,91,5,61,0,0,91,92,5,8,0,0,92,3,1,0,0,0,93,94,5,
		2,0,0,94,95,5,61,0,0,95,99,5,9,0,0,96,98,3,6,3,0,97,96,1,0,0,0,98,101,
		1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,
		103,5,10,0,0,103,5,1,0,0,0,104,108,3,8,4,0,105,108,3,10,5,0,106,108,3,
		4,2,0,107,104,1,0,0,0,107,105,1,0,0,0,107,106,1,0,0,0,108,7,1,0,0,0,109,
		110,5,3,0,0,110,111,3,16,8,0,111,117,5,61,0,0,112,113,5,9,0,0,113,114,
		5,60,0,0,114,116,5,10,0,0,115,112,1,0,0,0,116,119,1,0,0,0,117,115,1,0,
		0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,8,0,0,121,
		9,1,0,0,0,122,123,5,5,0,0,123,124,3,16,8,0,124,125,5,61,0,0,125,127,5,
		11,0,0,126,128,3,12,6,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,
		0,129,130,5,12,0,0,130,131,3,18,9,0,131,11,1,0,0,0,132,137,3,14,7,0,133,
		134,5,13,0,0,134,136,3,14,7,0,135,133,1,0,0,0,136,139,1,0,0,0,137,135,
		1,0,0,0,137,138,1,0,0,0,138,13,1,0,0,0,139,137,1,0,0,0,140,141,3,16,8,
		0,141,146,5,61,0,0,142,143,5,9,0,0,143,145,5,10,0,0,144,142,1,0,0,0,145,
		148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,15,1,0,0,0,148,146,1,0,
		0,0,149,150,7,0,0,0,150,17,1,0,0,0,151,155,5,9,0,0,152,154,3,20,10,0,153,
		152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,
		0,0,0,157,155,1,0,0,0,158,159,5,10,0,0,159,19,1,0,0,0,160,170,3,68,34,
		0,161,162,5,47,0,0,162,171,3,38,19,0,163,165,5,11,0,0,164,166,3,64,32,
		0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,171,5,12,0,0,168,
		171,5,44,0,0,169,171,5,45,0,0,170,161,1,0,0,0,170,163,1,0,0,0,170,168,
		1,0,0,0,170,169,1,0,0,0,171,182,1,0,0,0,172,182,3,18,9,0,173,182,3,22,
		11,0,174,182,3,24,12,0,175,182,3,26,13,0,176,182,3,30,15,0,177,182,3,32,
		16,0,178,182,3,34,17,0,179,182,3,36,18,0,180,182,5,8,0,0,181,160,1,0,0,
		0,181,172,1,0,0,0,181,173,1,0,0,0,181,174,1,0,0,0,181,175,1,0,0,0,181,
		176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,
		0,0,0,182,21,1,0,0,0,183,184,5,14,0,0,184,185,5,11,0,0,185,186,3,38,19,
		0,186,187,5,12,0,0,187,190,3,20,10,0,188,189,5,15,0,0,189,191,3,20,10,
		0,190,188,1,0,0,0,190,191,1,0,0,0,191,23,1,0,0,0,192,193,5,17,0,0,193,
		194,5,11,0,0,194,195,3,38,19,0,195,196,5,12,0,0,196,197,3,20,10,0,197,
		25,1,0,0,0,198,199,5,16,0,0,199,200,5,11,0,0,200,201,3,28,14,0,201,202,
		5,12,0,0,202,203,3,20,10,0,203,27,1,0,0,0,204,208,3,8,4,0,205,208,3,36,
		18,0,206,208,1,0,0,0,207,204,1,0,0,0,207,205,1,0,0,0,207,206,1,0,0,0,208,
		29,1,0,0,0,209,211,5,19,0,0,210,212,3,38,19,0,211,210,1,0,0,0,211,212,
		1,0,0,0,212,213,1,0,0,0,213,214,5,8,0,0,214,31,1,0,0,0,215,216,5,20,0,
		0,216,217,5,11,0,0,217,218,3,68,34,0,218,219,5,12,0,0,219,220,5,8,0,0,
		220,33,1,0,0,0,221,222,5,21,0,0,222,225,5,11,0,0,223,226,3,38,19,0,224,
		226,5,59,0,0,225,223,1,0,0,0,225,224,1,0,0,0,226,232,1,0,0,0,227,228,5,
		13,0,0,228,231,3,38,19,0,229,231,5,59,0,0,230,227,1,0,0,0,230,229,1,0,
		0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,
		232,1,0,0,0,235,236,5,12,0,0,236,237,5,8,0,0,237,35,1,0,0,0,238,239,3,
		38,19,0,239,240,5,8,0,0,240,37,1,0,0,0,241,242,3,40,20,0,242,39,1,0,0,
		0,243,247,3,44,22,0,244,245,3,42,21,0,245,246,3,44,22,0,246,248,1,0,0,
		0,247,244,1,0,0,0,247,248,1,0,0,0,248,41,1,0,0,0,249,250,7,1,0,0,250,43,
		1,0,0,0,251,257,3,46,23,0,252,253,5,42,0,0,253,254,3,38,19,0,254,255,5,
		34,0,0,255,256,3,44,22,0,256,258,1,0,0,0,257,252,1,0,0,0,257,258,1,0,0,
		0,258,45,1,0,0,0,259,264,3,48,24,0,260,261,5,41,0,0,261,263,3,48,24,0,
		262,260,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,47,
		1,0,0,0,266,264,1,0,0,0,267,272,3,50,25,0,268,269,5,40,0,0,269,271,3,50,
		25,0,270,268,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,
		49,1,0,0,0,274,272,1,0,0,0,275,280,3,52,26,0,276,277,7,2,0,0,277,279,3,
		52,26,0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,
		0,281,51,1,0,0,0,282,280,1,0,0,0,283,288,3,54,27,0,284,285,7,3,0,0,285,
		287,3,54,27,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,
		1,0,0,0,289,53,1,0,0,0,290,288,1,0,0,0,291,296,3,56,28,0,292,293,7,4,0,
		0,293,295,3,56,28,0,294,292,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,
		297,1,0,0,0,297,55,1,0,0,0,298,296,1,0,0,0,299,304,3,58,29,0,300,301,7,
		5,0,0,301,303,3,58,29,0,302,300,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,
		0,304,305,1,0,0,0,305,57,1,0,0,0,306,304,1,0,0,0,307,314,3,60,30,0,308,
		309,5,11,0,0,309,310,3,16,8,0,310,311,5,12,0,0,311,312,3,58,29,0,312,314,
		1,0,0,0,313,307,1,0,0,0,313,308,1,0,0,0,314,59,1,0,0,0,315,324,3,62,31,
		0,316,317,5,44,0,0,317,324,3,60,30,0,318,319,5,45,0,0,319,324,3,60,30,
		0,320,321,3,76,38,0,321,322,3,58,29,0,322,324,1,0,0,0,323,315,1,0,0,0,
		323,316,1,0,0,0,323,318,1,0,0,0,323,320,1,0,0,0,324,61,1,0,0,0,325,341,
		3,66,33,0,326,327,5,9,0,0,327,328,3,38,19,0,328,329,5,10,0,0,329,340,1,
		0,0,0,330,332,5,11,0,0,331,333,3,64,32,0,332,331,1,0,0,0,332,333,1,0,0,
		0,333,334,1,0,0,0,334,340,5,12,0,0,335,336,5,46,0,0,336,340,5,61,0,0,337,
		340,5,44,0,0,338,340,5,45,0,0,339,326,1,0,0,0,339,330,1,0,0,0,339,335,
		1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,
		0,341,342,1,0,0,0,342,63,1,0,0,0,343,341,1,0,0,0,344,349,3,38,19,0,345,
		346,5,13,0,0,346,348,3,38,19,0,347,345,1,0,0,0,348,351,1,0,0,0,349,347,
		1,0,0,0,349,350,1,0,0,0,350,65,1,0,0,0,351,349,1,0,0,0,352,363,3,68,34,
		0,353,363,3,70,35,0,354,355,5,11,0,0,355,356,3,38,19,0,356,357,5,12,0,
		0,357,363,1,0,0,0,358,363,5,61,0,0,359,363,3,72,36,0,360,363,3,74,37,0,
		361,363,5,59,0,0,362,352,1,0,0,0,362,353,1,0,0,0,362,354,1,0,0,0,362,358,
		1,0,0,0,362,359,1,0,0,0,362,360,1,0,0,0,362,361,1,0,0,0,363,67,1,0,0,0,
		364,373,5,61,0,0,365,366,5,9,0,0,366,367,3,38,19,0,367,368,5,10,0,0,368,
		372,1,0,0,0,369,370,5,46,0,0,370,372,5,61,0,0,371,365,1,0,0,0,371,369,
		1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,69,1,0,0,0,
		375,373,1,0,0,0,376,377,5,61,0,0,377,379,5,11,0,0,378,380,3,64,32,0,379,
		378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,5,12,0,0,382,71,1,
		0,0,0,383,384,5,60,0,0,384,73,1,0,0,0,385,386,5,32,0,0,386,75,1,0,0,0,
		387,388,7,6,0,0,388,77,1,0,0,0,36,79,84,99,107,117,127,137,146,155,165,
		170,181,190,207,211,225,230,232,247,257,264,272,280,288,296,304,313,323,
		332,339,341,349,362,371,373,379
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen
