//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/kosti/RiderProjects/AvaloniaApplication5/AvaloniaApplication5/MiniCParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Using=1, Class=2, VarDecl=3, ClassDecl=4, MethodDecl=5, Type=6, Void=7, 
		Statement=8, Semicolon=9, Lbrace=10, Rbrace=11, Lparen=12, Rparen=13, 
		LList=14, RList=15, Comma=16, If=17, Else=18, For=19, While=20, Break=21, 
		Return=22, Read=23, Write=24, Add=25, Del=26, Len=27, ActPars=28, Condition=29, 
		CondTerm=30, CondFact=31, Cast=32, Expr=33, Term=34, Factor=35, Designator=36, 
		StringConst=37, CharConst=38, Number=39, Colon=40, Dash=41, Plus=42, Minus=43, 
		Mult=44, Div=45, Mod=46, LogicalAnd=47, LogicalOr=48, QuestionMark=49, 
		PlusEquals=50, PlusPlus=51, MinusMinus=52, DOT=53, Assign=54, MinusEquals=55, 
		MultEquals=56, DivEquals=57, ModEquals=58, Equals=59, NotEquals=60, LogicalNot=61, 
		LessThan=62, GreaterThan=63, LessThanOrEquals=64, GreaterThanOrEquals=65, 
		True=66, False=67, New=68, PLAIN_TEXT=69, NUM=70, ID=71, WS=72, COMMENT=73, 
		MULTIPLE_COMMENT=74;
	public const int
		RULE_program = 0, RULE_usingDeclaration = 1, RULE_classDeclaration = 2, 
		RULE_memberDeclaration = 3, RULE_varDeclaration = 4, RULE_methodDeclaration = 5, 
		RULE_formPars = 6, RULE_parameter = 7, RULE_type = 8, RULE_block = 9, 
		RULE_statement = 10, RULE_addStatement = 11, RULE_delStatement = 12, RULE_lenStatement = 13, 
		RULE_ifStatement = 14, RULE_forStatement = 15, RULE_whileStatement = 16, 
		RULE_returnStatement = 17, RULE_readStatement = 18, RULE_writeStatement = 19, 
		RULE_expressionStatement = 20, RULE_actPars = 21, RULE_designator = 22, 
		RULE_condition = 23, RULE_condTerm = 24, RULE_condFact = 25, RULE_cast = 26, 
		RULE_expression = 27, RULE_factor = 28, RULE_term = 29, RULE_mulop = 30, 
		RULE_addop = 31, RULE_relop = 32, RULE_ident = 33;
	public static readonly string[] ruleNames = {
		"program", "usingDeclaration", "classDeclaration", "memberDeclaration", 
		"varDeclaration", "methodDeclaration", "formPars", "parameter", "type", 
		"block", "statement", "addStatement", "delStatement", "lenStatement", 
		"ifStatement", "forStatement", "whileStatement", "returnStatement", "readStatement", 
		"writeStatement", "expressionStatement", "actPars", "designator", "condition", 
		"condTerm", "condFact", "cast", "expression", "factor", "term", "mulop", 
		"addop", "relop", "ident"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'varDecl'", "'classDecl'", "'methodDecl'", 
		"'type'", "'Void'", "'statement'", "';'", "'{'", "'}'", "'('", "')'", 
		"'['", "']'", "','", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'add'", "'del'", "'len'", "'actPars'", 
		"'condition'", "'condTerm'", "'condFact'", "'cast'", "'expr'", "'term'", 
		"'factor'", "'designator'", "'string'", "'char'", "'number'", "':'", null, 
		"'+'", null, "'*'", "'/'", "'%'", "'&&'", "'||'", "'?'", "'+='", "'++'", 
		"'--'", "'.'", "'='", "'-='", "'*='", "'/='", "'%='", "'=='", "'!='", 
		"'!'", "'<'", "'>'", "'<='", "'>='", "'true'", "'false'", "'new'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", 
		"Void", "Statement", "Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", 
		"LList", "RList", "Comma", "If", "Else", "For", "While", "Break", "Return", 
		"Read", "Write", "Add", "Del", "Len", "ActPars", "Condition", "CondTerm", 
		"CondFact", "Cast", "Expr", "Term", "Factor", "Designator", "StringConst", 
		"CharConst", "Number", "Colon", "Dash", "Plus", "Minus", "Mult", "Div", 
		"Mod", "LogicalAnd", "LogicalOr", "QuestionMark", "PlusEquals", "PlusPlus", 
		"MinusMinus", "DOT", "Assign", "MinusEquals", "MultEquals", "DivEquals", 
		"ModEquals", "Equals", "NotEquals", "LogicalNot", "LessThan", "GreaterThan", 
		"LessThanOrEquals", "GreaterThanOrEquals", "True", "False", "New", "PLAIN_TEXT", 
		"NUM", "ID", "WS", "COMMENT", "MULTIPLE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Using) {
				{
				State = 68;
				usingDeclaration();
				}
			}

			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Class) {
				{
				{
				State = 71;
				classDeclaration();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(MiniCParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(Using);
			State = 80;
			ident();
			State = 81;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MiniCParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(Class);
			State = 84;
			ident();
			State = 85;
			Match(Lbrace);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Class || _la==Void || _la==ID) {
				{
				{
				State = 86;
				memberDeclaration();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_memberDeclaration);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				methodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			type();
			State = 100;
			ident();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 101;
				Match(Comma);
				State = 102;
				ident();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(MiniCParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 110;
				type();
				}
				break;
			case Void:
				{
				State = 111;
				Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 114;
			Match(ID);
			State = 115;
			Match(Lparen);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 116;
				formPars();
				}
			}

			State = 119;
			Match(Rparen);
			State = 120;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 12, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			parameter();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 123;
				Match(Comma);
				State = 124;
				parameter();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			type();
			State = 131;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LList() { return GetTokens(MiniCParser.LList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LList(int i) {
			return GetToken(MiniCParser.LList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RList() { return GetTokens(MiniCParser.RList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RList(int i) {
			return GetToken(MiniCParser.RList, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ident();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LList) {
				{
				{
				State = 134;
				Match(LList);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 135;
					ident();
					}
				}

				State = 138;
				Match(RList);
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(Lbrace);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 4611686018427911427L) != 0) {
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 145;
					statement();
					}
					break;
				case 2:
					{
					State = 146;
					varDeclaration();
					}
					break;
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MiniCParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MiniCParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MiniCParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MiniCParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadStatementContext readStatement() {
			return GetRuleContext<ReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteStatementContext writeStatement() {
			return GetRuleContext<WriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddStatementContext addStatement() {
			return GetRuleContext<AddStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelStatementContext delStatement() {
			return GetRuleContext<DelStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LenStatementContext lenStatement() {
			return GetRuleContext<LenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		int _la;
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				designator();
				State = 164;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Assign:
					{
					State = 155;
					Match(Assign);
					State = 156;
					expression();
					}
					break;
				case Lparen:
					{
					State = 157;
					Match(Lparen);
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 1134907106734899201L) != 0) {
						{
						State = 158;
						actPars();
						}
					}

					State = 161;
					Match(Rparen);
					}
					break;
				case PlusPlus:
					{
					State = 162;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 163;
					Match(MinusMinus);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 166;
				Match(Semicolon);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				ifStatement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				forStatement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				whileStatement();
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 5);
				{
				State = 171;
				Match(Break);
				State = 172;
				Match(Semicolon);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 6);
				{
				State = 173;
				returnStatement();
				}
				break;
			case Read:
				EnterOuterAlt(_localctx, 7);
				{
				State = 174;
				readStatement();
				}
				break;
			case Write:
				EnterOuterAlt(_localctx, 8);
				{
				State = 175;
				writeStatement();
				}
				break;
			case Add:
				EnterOuterAlt(_localctx, 9);
				{
				State = 176;
				addStatement();
				}
				break;
			case Del:
				EnterOuterAlt(_localctx, 10);
				{
				State = 177;
				delStatement();
				}
				break;
			case Len:
				EnterOuterAlt(_localctx, 11);
				{
				State = 178;
				lenStatement();
				}
				break;
			case Lbrace:
				EnterOuterAlt(_localctx, 12);
				{
				State = 179;
				block();
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 13);
				{
				State = 180;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(MiniCParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MiniCParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT() { return GetToken(MiniCParser.PLAIN_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MiniCParser.NUM, 0); }
		public AddStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addStatement; } }
	}

	[RuleVersion(0)]
	public AddStatementContext addStatement() {
		AddStatementContext _localctx = new AddStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_addStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(Add);
			State = 184;
			Match(Lparen);
			State = 185;
			designator();
			{
			State = 186;
			Match(Comma);
			State = 187;
			_la = TokenStream.LA(1);
			if ( !((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			State = 189;
			Match(Rparen);
			State = 190;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Del() { return GetToken(MiniCParser.Del, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MiniCParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public DelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delStatement; } }
	}

	[RuleVersion(0)]
	public DelStatementContext delStatement() {
		DelStatementContext _localctx = new DelStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_delStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(Del);
			State = 193;
			Match(Lparen);
			State = 194;
			designator();
			State = 195;
			Match(Comma);
			State = 196;
			expression();
			State = 197;
			Match(Rparen);
			State = 198;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Len() { return GetToken(MiniCParser.Len, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public LenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenStatement; } }
	}

	[RuleVersion(0)]
	public LenStatementContext lenStatement() {
		LenStatementContext _localctx = new LenStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_lenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(Len);
			State = 201;
			Match(Lparen);
			State = 202;
			designator();
			State = 203;
			Match(Rparen);
			State = 204;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MiniCParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MiniCParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(If);
			State = 207;
			Match(Lparen);
			State = 208;
			condition();
			State = 209;
			Match(Rparen);
			State = 210;
			statement();
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 211;
				Match(Else);
				State = 212;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MiniCParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_forStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(For);
			State = 216;
			Match(Lparen);
			State = 217;
			expressionStatement();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 218;
					varDeclaration();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 1134907106734899201L) != 0) {
				{
				{
				State = 224;
				condition();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 230;
			Match(Rparen);
			State = 231;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MiniCParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(While);
			State = 234;
			Match(Lparen);
			State = 235;
			condition();
			State = 236;
			Match(Rparen);
			State = 237;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MiniCParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(Return);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 1134907106734899201L) != 0) {
				{
				State = 240;
				expression();
				}
			}

			State = 243;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MiniCParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStatement; } }
	}

	[RuleVersion(0)]
	public ReadStatementContext readStatement() {
		ReadStatementContext _localctx = new ReadStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_readStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(Read);
			State = 246;
			Match(Lparen);
			State = 247;
			designator();
			State = 248;
			Match(Rparen);
			State = 249;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(MiniCParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLAIN_TEXT() { return GetTokens(MiniCParser.PLAIN_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT(int i) {
			return GetToken(MiniCParser.PLAIN_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MiniCParser.Comma, 0); }
		public WriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStatement; } }
	}

	[RuleVersion(0)]
	public WriteStatementContext writeStatement() {
		WriteStatementContext _localctx = new WriteStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_writeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(Write);
			State = 252;
			Match(Lparen);
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 253;
				expression();
				}
				break;
			case 2:
				{
				State = 254;
				Match(PLAIN_TEXT);
				}
				break;
			}
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comma:
				{
				State = 257;
				Match(Comma);
				State = 258;
				expression();
				}
				break;
			case PLAIN_TEXT:
				{
				State = 259;
				Match(PLAIN_TEXT);
				}
				break;
			case Rparen:
				break;
			default:
				break;
			}
			State = 262;
			Match(Rparen);
			State = 263;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			expression();
			State = 266;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 42, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			expression();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 269;
				Match(Comma);
				State = 270;
				expression();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LList() { return GetTokens(MiniCParser.LList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LList(int i) {
			return GetToken(MiniCParser.LList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RList() { return GetTokens(MiniCParser.RList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RList(int i) {
			return GetToken(MiniCParser.RList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCParser.DOT, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(ID);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LList || _la==DOT) {
				{
				State = 283;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LList:
					{
					State = 277;
					Match(LList);
					State = 278;
					expression();
					State = 279;
					Match(RList);
					}
					break;
				case DOT:
					{
					State = 281;
					Match(DOT);
					State = 282;
					Match(ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalOr() { return GetTokens(MiniCParser.LogicalOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr(int i) {
			return GetToken(MiniCParser.LogicalOr, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 46, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			condTerm();
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalOr) {
				{
				{
				State = 289;
				Match(LogicalOr);
				State = 290;
				condTerm();
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalAnd() { return GetTokens(MiniCParser.LogicalAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd(int i) {
			return GetToken(MiniCParser.LogicalAnd, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 48, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			condFact();
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalAnd) {
				{
				{
				State = 297;
				Match(LogicalAnd);
				State = 298;
				condFact();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 50, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			expression();
			State = 305;
			relop();
			State = 306;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 52, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(Lparen);
			State = 309;
			type();
			State = 310;
			Match(Rparen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash() { return GetToken(MiniCParser.Dash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dash) {
				{
				State = 312;
				Match(Dash);
				}
			}

			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 315;
				cast();
				}
				break;
			}
			State = 318;
			term();
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 319;
				addop();
				State = 320;
				term();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MiniCParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharConst() { return GetToken(MiniCParser.CharConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConst() { return GetToken(MiniCParser.StringConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MiniCParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MiniCParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT() { return GetToken(MiniCParser.PLAIN_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(MiniCParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 56, RULE_factor);
		int _la;
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				designator();
				State = 332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 328;
					Match(Lparen);
					State = 329;
					actPars();
					State = 330;
					Match(Rparen);
					}
					break;
				}
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				Match(NUM);
				}
				break;
			case CharConst:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				Match(CharConst);
				}
				break;
			case StringConst:
				EnterOuterAlt(_localctx, 4);
				{
				State = 336;
				Match(StringConst);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 5);
				{
				State = 337;
				_la = TokenStream.LA(1);
				if ( !(_la==True || _la==False) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case PLAIN_TEXT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 338;
				Match(PLAIN_TEXT);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 339;
				Match(New);
				State = 340;
				type();
				}
				}
				break;
			case Lparen:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 341;
				Match(Lparen);
				State = 342;
				expression();
				State = 343;
				Match(Rparen);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 58, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			factor();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0) {
				{
				{
				State = 348;
				mulop();
				State = 349;
				factor();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mult() { return GetToken(MiniCParser.Mult, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(MiniCParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(MiniCParser.Mod, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 60, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MiniCParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MiniCParser.Minus, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 62, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MiniCParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEquals() { return GetToken(MiniCParser.LessThanOrEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(MiniCParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEquals() { return GetToken(MiniCParser.GreaterThanOrEquals, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 64, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_la = TokenStream.LA(1);
			if ( !((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 15L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LList() { return GetTokens(MiniCParser.LList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LList(int i) {
			return GetToken(MiniCParser.LList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RList() { return GetTokens(MiniCParser.RList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RList(int i) {
			return GetToken(MiniCParser.RList, i);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 66, RULE_ident);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(ID);
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 363;
					Match(LList);
					State = 364;
					Match(RList);
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,74,371,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,3,0,70,8,0,1,0,5,
		0,73,8,0,10,0,12,0,76,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,
		88,8,2,10,2,12,2,91,9,2,1,2,1,2,1,3,1,3,1,3,3,3,98,8,3,1,4,1,4,1,4,1,4,
		5,4,104,8,4,10,4,12,4,107,9,4,1,4,1,4,1,5,1,5,3,5,113,8,5,1,5,1,5,1,5,
		3,5,118,8,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,126,8,6,10,6,12,6,129,9,6,1,7,
		1,7,1,7,1,8,1,8,1,8,3,8,137,8,8,1,8,5,8,140,8,8,10,8,12,8,143,9,8,1,9,
		1,9,1,9,5,9,148,8,9,10,9,12,9,151,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		3,10,160,8,10,1,10,1,10,1,10,3,10,165,8,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,182,8,10,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		3,14,214,8,14,1,15,1,15,1,15,1,15,5,15,220,8,15,10,15,12,15,223,9,15,1,
		15,5,15,226,8,15,10,15,12,15,229,9,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,16,1,16,1,17,1,17,3,17,242,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,3,19,256,8,19,1,19,1,19,1,19,3,19,261,8,19,1,
		19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,5,21,272,8,21,10,21,12,21,275,
		9,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,284,8,22,10,22,12,22,287,
		9,22,1,23,1,23,1,23,5,23,292,8,23,10,23,12,23,295,9,23,1,24,1,24,1,24,
		5,24,300,8,24,10,24,12,24,303,9,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
		1,26,1,27,3,27,314,8,27,1,27,3,27,317,8,27,1,27,1,27,1,27,1,27,5,27,323,
		8,27,10,27,12,27,326,9,27,1,28,1,28,1,28,1,28,1,28,3,28,333,8,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,346,8,28,1,29,1,
		29,1,29,1,29,5,29,352,8,29,10,29,12,29,355,9,29,1,30,1,30,1,31,1,31,1,
		32,1,32,1,33,1,33,1,33,5,33,366,8,33,10,33,12,33,369,9,33,1,33,0,0,34,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,0,5,1,0,69,71,1,0,66,67,1,0,44,46,1,0,42,43,
		1,0,62,65,390,0,69,1,0,0,0,2,79,1,0,0,0,4,83,1,0,0,0,6,97,1,0,0,0,8,99,
		1,0,0,0,10,112,1,0,0,0,12,122,1,0,0,0,14,130,1,0,0,0,16,133,1,0,0,0,18,
		144,1,0,0,0,20,181,1,0,0,0,22,183,1,0,0,0,24,192,1,0,0,0,26,200,1,0,0,
		0,28,206,1,0,0,0,30,215,1,0,0,0,32,233,1,0,0,0,34,239,1,0,0,0,36,245,1,
		0,0,0,38,251,1,0,0,0,40,265,1,0,0,0,42,268,1,0,0,0,44,276,1,0,0,0,46,288,
		1,0,0,0,48,296,1,0,0,0,50,304,1,0,0,0,52,308,1,0,0,0,54,313,1,0,0,0,56,
		345,1,0,0,0,58,347,1,0,0,0,60,356,1,0,0,0,62,358,1,0,0,0,64,360,1,0,0,
		0,66,362,1,0,0,0,68,70,3,2,1,0,69,68,1,0,0,0,69,70,1,0,0,0,70,74,1,0,0,
		0,71,73,3,4,2,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,
		0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,5,0,0,1,78,1,1,0,0,0,79,80,5,1,0,0,
		80,81,3,66,33,0,81,82,5,9,0,0,82,3,1,0,0,0,83,84,5,2,0,0,84,85,3,66,33,
		0,85,89,5,10,0,0,86,88,3,6,3,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,
		0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,11,0,0,93,5,1,0,0,
		0,94,98,3,8,4,0,95,98,3,10,5,0,96,98,3,4,2,0,97,94,1,0,0,0,97,95,1,0,0,
		0,97,96,1,0,0,0,98,7,1,0,0,0,99,100,3,16,8,0,100,105,3,66,33,0,101,102,
		5,16,0,0,102,104,3,66,33,0,103,101,1,0,0,0,104,107,1,0,0,0,105,103,1,0,
		0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,9,0,0,109,
		9,1,0,0,0,110,113,3,16,8,0,111,113,5,7,0,0,112,110,1,0,0,0,112,111,1,0,
		0,0,113,114,1,0,0,0,114,115,5,71,0,0,115,117,5,12,0,0,116,118,3,12,6,0,
		117,116,1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,120,5,13,0,0,120,121,
		3,18,9,0,121,11,1,0,0,0,122,127,3,14,7,0,123,124,5,16,0,0,124,126,3,14,
		7,0,125,123,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,
		13,1,0,0,0,129,127,1,0,0,0,130,131,3,16,8,0,131,132,3,66,33,0,132,15,1,
		0,0,0,133,141,3,66,33,0,134,136,5,14,0,0,135,137,3,66,33,0,136,135,1,0,
		0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,140,5,15,0,0,139,134,1,0,0,0,140,
		143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,17,1,0,0,0,143,141,1,0,
		0,0,144,149,5,10,0,0,145,148,3,20,10,0,146,148,3,8,4,0,147,145,1,0,0,0,
		147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,
		1,0,0,0,151,149,1,0,0,0,152,153,5,11,0,0,153,19,1,0,0,0,154,164,3,44,22,
		0,155,156,5,54,0,0,156,165,3,54,27,0,157,159,5,12,0,0,158,160,3,42,21,
		0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,165,5,13,0,0,162,
		165,5,51,0,0,163,165,5,52,0,0,164,155,1,0,0,0,164,157,1,0,0,0,164,162,
		1,0,0,0,164,163,1,0,0,0,165,166,1,0,0,0,166,167,5,9,0,0,167,182,1,0,0,
		0,168,182,3,28,14,0,169,182,3,30,15,0,170,182,3,32,16,0,171,172,5,21,0,
		0,172,182,5,9,0,0,173,182,3,34,17,0,174,182,3,36,18,0,175,182,3,38,19,
		0,176,182,3,22,11,0,177,182,3,24,12,0,178,182,3,26,13,0,179,182,3,18,9,
		0,180,182,5,9,0,0,181,154,1,0,0,0,181,168,1,0,0,0,181,169,1,0,0,0,181,
		170,1,0,0,0,181,171,1,0,0,0,181,173,1,0,0,0,181,174,1,0,0,0,181,175,1,
		0,0,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,
		181,180,1,0,0,0,182,21,1,0,0,0,183,184,5,25,0,0,184,185,5,12,0,0,185,186,
		3,44,22,0,186,187,5,16,0,0,187,188,7,0,0,0,188,189,1,0,0,0,189,190,5,13,
		0,0,190,191,5,9,0,0,191,23,1,0,0,0,192,193,5,26,0,0,193,194,5,12,0,0,194,
		195,3,44,22,0,195,196,5,16,0,0,196,197,3,54,27,0,197,198,5,13,0,0,198,
		199,5,9,0,0,199,25,1,0,0,0,200,201,5,27,0,0,201,202,5,12,0,0,202,203,3,
		44,22,0,203,204,5,13,0,0,204,205,5,9,0,0,205,27,1,0,0,0,206,207,5,17,0,
		0,207,208,5,12,0,0,208,209,3,46,23,0,209,210,5,13,0,0,210,213,3,20,10,
		0,211,212,5,18,0,0,212,214,3,20,10,0,213,211,1,0,0,0,213,214,1,0,0,0,214,
		29,1,0,0,0,215,216,5,19,0,0,216,217,5,12,0,0,217,221,3,40,20,0,218,220,
		3,8,4,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,
		0,222,227,1,0,0,0,223,221,1,0,0,0,224,226,3,46,23,0,225,224,1,0,0,0,226,
		229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,227,1,
		0,0,0,230,231,5,13,0,0,231,232,3,20,10,0,232,31,1,0,0,0,233,234,5,20,0,
		0,234,235,5,12,0,0,235,236,3,46,23,0,236,237,5,13,0,0,237,238,3,20,10,
		0,238,33,1,0,0,0,239,241,5,22,0,0,240,242,3,54,27,0,241,240,1,0,0,0,241,
		242,1,0,0,0,242,243,1,0,0,0,243,244,5,9,0,0,244,35,1,0,0,0,245,246,5,23,
		0,0,246,247,5,12,0,0,247,248,3,44,22,0,248,249,5,13,0,0,249,250,5,9,0,
		0,250,37,1,0,0,0,251,252,5,24,0,0,252,255,5,12,0,0,253,256,3,54,27,0,254,
		256,5,69,0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,260,1,0,0,0,257,258,5,
		16,0,0,258,261,3,54,27,0,259,261,5,69,0,0,260,257,1,0,0,0,260,259,1,0,
		0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,5,13,0,0,263,264,5,9,0,0,264,
		39,1,0,0,0,265,266,3,54,27,0,266,267,5,9,0,0,267,41,1,0,0,0,268,273,3,
		54,27,0,269,270,5,16,0,0,270,272,3,54,27,0,271,269,1,0,0,0,272,275,1,0,
		0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,43,1,0,0,0,275,273,1,0,0,0,276,
		285,5,71,0,0,277,278,5,14,0,0,278,279,3,54,27,0,279,280,5,15,0,0,280,284,
		1,0,0,0,281,282,5,53,0,0,282,284,5,71,0,0,283,277,1,0,0,0,283,281,1,0,
		0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,45,1,0,0,0,287,
		285,1,0,0,0,288,293,3,48,24,0,289,290,5,48,0,0,290,292,3,48,24,0,291,289,
		1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,47,1,0,0,0,
		295,293,1,0,0,0,296,301,3,50,25,0,297,298,5,47,0,0,298,300,3,50,25,0,299,
		297,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,49,1,0,
		0,0,303,301,1,0,0,0,304,305,3,54,27,0,305,306,3,64,32,0,306,307,3,54,27,
		0,307,51,1,0,0,0,308,309,5,12,0,0,309,310,3,16,8,0,310,311,5,13,0,0,311,
		53,1,0,0,0,312,314,5,41,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,316,1,
		0,0,0,315,317,3,52,26,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,
		0,318,324,3,58,29,0,319,320,3,62,31,0,320,321,3,58,29,0,321,323,1,0,0,
		0,322,319,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,
		55,1,0,0,0,326,324,1,0,0,0,327,332,3,44,22,0,328,329,5,12,0,0,329,330,
		3,42,21,0,330,331,5,13,0,0,331,333,1,0,0,0,332,328,1,0,0,0,332,333,1,0,
		0,0,333,346,1,0,0,0,334,346,5,70,0,0,335,346,5,38,0,0,336,346,5,37,0,0,
		337,346,7,1,0,0,338,346,5,69,0,0,339,340,5,68,0,0,340,346,3,16,8,0,341,
		342,5,12,0,0,342,343,3,54,27,0,343,344,5,13,0,0,344,346,1,0,0,0,345,327,
		1,0,0,0,345,334,1,0,0,0,345,335,1,0,0,0,345,336,1,0,0,0,345,337,1,0,0,
		0,345,338,1,0,0,0,345,339,1,0,0,0,345,341,1,0,0,0,346,57,1,0,0,0,347,353,
		3,56,28,0,348,349,3,60,30,0,349,350,3,56,28,0,350,352,1,0,0,0,351,348,
		1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,59,1,0,0,0,
		355,353,1,0,0,0,356,357,7,2,0,0,357,61,1,0,0,0,358,359,7,3,0,0,359,63,
		1,0,0,0,360,361,7,4,0,0,361,65,1,0,0,0,362,367,5,71,0,0,363,364,5,14,0,
		0,364,366,5,15,0,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,
		368,1,0,0,0,368,67,1,0,0,0,369,367,1,0,0,0,33,69,74,89,97,105,112,117,
		127,136,141,147,149,159,164,181,213,221,227,241,255,260,273,283,285,293,
		301,313,316,324,332,345,353,367
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen
