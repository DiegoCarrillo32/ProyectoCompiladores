//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/kosti/RiderProjects/AvaloniaApplication5/AvaloniaApplication5/MiniCParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Using=1, Class=2, VarDecl=3, ClassDecl=4, MethodDecl=5, Type=6, Void=7, 
		Statement=8, Semicolon=9, Lbrace=10, Rbrace=11, Lparen=12, Rparen=13, 
		LList=14, RList=15, Comma=16, If=17, Else=18, For=19, While=20, Break=21, 
		Return=22, Read=23, Write=24, ActPars=25, Condition=26, CondTerm=27, CondFact=28, 
		Cast=29, Expr=30, Term=31, Factor=32, Designator=33, StringConst=34, CharConst=35, 
		Number=36, Colon=37, Dash=38, Plus=39, Minus=40, Mult=41, Div=42, Mod=43, 
		LogicalAnd=44, LogicalOr=45, QuestionMark=46, PlusEquals=47, PlusPlus=48, 
		MinusMinus=49, DOT=50, Assign=51, MinusEquals=52, MultEquals=53, DivEquals=54, 
		ModEquals=55, Equals=56, NotEquals=57, LogicalNot=58, LessThan=59, GreaterThan=60, 
		LessThanOrEquals=61, GreaterThanOrEquals=62, True=63, False=64, New=65, 
		PLAIN_TEXT=66, NUM=67, ID=68, COMMENT=69, WS=70;
	public const int
		RULE_program = 0, RULE_usingDeclaration = 1, RULE_classDeclaration = 2, 
		RULE_memberDeclaration = 3, RULE_varDeclaration = 4, RULE_methodDeclaration = 5, 
		RULE_formPars = 6, RULE_parameter = 7, RULE_type = 8, RULE_block = 9, 
		RULE_statement = 10, RULE_ifStatement = 11, RULE_forStatement = 12, RULE_whileStatement = 13, 
		RULE_returnStatement = 14, RULE_readStatement = 15, RULE_writeStatement = 16, 
		RULE_expressionStatement = 17, RULE_assignmentOperator = 18, RULE_actPars = 19, 
		RULE_designator = 20, RULE_condition = 21, RULE_condTerm = 22, RULE_condFact = 23, 
		RULE_cast = 24, RULE_expression2 = 25, RULE_factor = 26, RULE_term = 27, 
		RULE_mulop = 28, RULE_addop = 29, RULE_relop = 30, RULE_ident = 31;
	public static readonly string[] ruleNames = {
		"program", "usingDeclaration", "classDeclaration", "memberDeclaration", 
		"varDeclaration", "methodDeclaration", "formPars", "parameter", "type", 
		"block", "statement", "ifStatement", "forStatement", "whileStatement", 
		"returnStatement", "readStatement", "writeStatement", "expressionStatement", 
		"assignmentOperator", "actPars", "designator", "condition", "condTerm", 
		"condFact", "cast", "expression2", "factor", "term", "mulop", "addop", 
		"relop", "ident"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'varDecl'", "'classDecl'", "'methodDecl'", 
		"'type'", "'Void'", "'statement'", "';'", "'{'", "'}'", "'('", "')'", 
		"'['", "']'", "','", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'actPars'", "'condition'", "'condTerm'", 
		"'condFact'", "'cast'", "'expr'", "'term'", "'factor'", "'designator'", 
		"'string'", "'char'", "'number'", "':'", null, "'+'", null, "'*'", "'/'", 
		"'%'", "'&&'", "'||'", "'?'", "'+='", "'++'", "'--'", "'.'", "'='", "'-='", 
		"'*='", "'/='", "'%='", "'=='", "'!='", "'!'", "'<'", "'>'", "'<='", "'>='", 
		"'true'", "'false'", "'new'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", 
		"Void", "Statement", "Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", 
		"LList", "RList", "Comma", "If", "Else", "For", "While", "Break", "Return", 
		"Read", "Write", "ActPars", "Condition", "CondTerm", "CondFact", "Cast", 
		"Expr", "Term", "Factor", "Designator", "StringConst", "CharConst", "Number", 
		"Colon", "Dash", "Plus", "Minus", "Mult", "Div", "Mod", "LogicalAnd", 
		"LogicalOr", "QuestionMark", "PlusEquals", "PlusPlus", "MinusMinus", "DOT", 
		"Assign", "MinusEquals", "MultEquals", "DivEquals", "ModEquals", "Equals", 
		"NotEquals", "LogicalNot", "LessThan", "GreaterThan", "LessThanOrEquals", 
		"GreaterThanOrEquals", "True", "False", "New", "PLAIN_TEXT", "NUM", "ID", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Using) {
				{
				State = 64;
				usingDeclaration();
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Class) {
				{
				{
				State = 67;
				classDeclaration();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(MiniCParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(Using);
			State = 76;
			ident();
			State = 77;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MiniCParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(Class);
			State = 80;
			ident();
			State = 81;
			Match(Lbrace);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Class || _la==Void || _la==ID) {
				{
				{
				State = 82;
				memberDeclaration();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_memberDeclaration);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				methodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			type();
			State = 96;
			ident();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 97;
				Match(Comma);
				State = 98;
				ident();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(MiniCParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 106;
				type();
				}
				break;
			case Void:
				{
				State = 107;
				Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 110;
			Match(ID);
			State = 111;
			Match(Lparen);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 112;
				formPars();
				}
			}

			State = 115;
			Match(Rparen);
			State = 116;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 12, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			parameter();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 119;
				Match(Comma);
				State = 120;
				parameter();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			type();
			State = 127;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LList() { return GetTokens(MiniCParser.LList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LList(int i) {
			return GetToken(MiniCParser.LList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RList() { return GetTokens(MiniCParser.RList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RList(int i) {
			return GetToken(MiniCParser.RList, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ident();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LList) {
				{
				{
				State = 130;
				Match(LList);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 131;
					ident();
					}
				}

				State = 134;
				Match(RList);
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(Lbrace);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 576460752303488259L) != 0) {
				{
				State = 143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 141;
					statement();
					}
					break;
				case 2:
					{
					State = 142;
					varDeclaration();
					}
					break;
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 148;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MiniCParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MiniCParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MiniCParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MiniCParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadStatementContext readStatement() {
			return GetRuleContext<ReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteStatementContext writeStatement() {
			return GetRuleContext<WriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		int _la;
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				designator();
				State = 160;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Assign:
					{
					State = 151;
					Match(Assign);
					State = 152;
					expression2();
					}
					break;
				case Lparen:
					{
					State = 153;
					Match(Lparen);
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 123848989832380417L) != 0) {
						{
						State = 154;
						actPars();
						}
					}

					State = 157;
					Match(Rparen);
					}
					break;
				case PlusPlus:
					{
					State = 158;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 159;
					Match(MinusMinus);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 162;
				Match(Semicolon);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				ifStatement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				forStatement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				whileStatement();
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				Match(Break);
				State = 168;
				Match(Semicolon);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 6);
				{
				State = 169;
				returnStatement();
				}
				break;
			case Read:
				EnterOuterAlt(_localctx, 7);
				{
				State = 170;
				readStatement();
				}
				break;
			case Write:
				EnterOuterAlt(_localctx, 8);
				{
				State = 171;
				writeStatement();
				}
				break;
			case Lbrace:
				EnterOuterAlt(_localctx, 9);
				{
				State = 172;
				block();
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 10);
				{
				State = 173;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MiniCParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MiniCParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(If);
			State = 177;
			Match(Lparen);
			State = 178;
			condition();
			State = 179;
			Match(Rparen);
			State = 180;
			statement();
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 181;
				Match(Else);
				State = 182;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MiniCParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_forStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(For);
			State = 186;
			Match(Lparen);
			State = 187;
			expressionStatement();
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 188;
					varDeclaration();
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 123848989832380417L) != 0) {
				{
				{
				State = 194;
				condition();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 200;
			Match(Rparen);
			State = 201;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MiniCParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(While);
			State = 204;
			Match(Lparen);
			State = 205;
			condition();
			State = 206;
			Match(Rparen);
			State = 207;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MiniCParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Return);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 123848989832380417L) != 0) {
				{
				State = 210;
				expression2();
				}
			}

			State = 213;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MiniCParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStatement; } }
	}

	[RuleVersion(0)]
	public ReadStatementContext readStatement() {
		ReadStatementContext _localctx = new ReadStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_readStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(Read);
			State = 216;
			Match(Lparen);
			State = 217;
			designator();
			State = 218;
			Match(Rparen);
			State = 219;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(MiniCParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context[] expression2() {
			return GetRuleContexts<Expression2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2(int i) {
			return GetRuleContext<Expression2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLAIN_TEXT() { return GetTokens(MiniCParser.PLAIN_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT(int i) {
			return GetToken(MiniCParser.PLAIN_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public WriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStatement; } }
	}

	[RuleVersion(0)]
	public WriteStatementContext writeStatement() {
		WriteStatementContext _localctx = new WriteStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_writeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(Write);
			State = 222;
			Match(Lparen);
			State = 225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lparen:
			case StringConst:
			case CharConst:
			case Dash:
			case True:
			case False:
			case New:
			case NUM:
			case ID:
				{
				State = 223;
				expression2();
				}
				break;
			case PLAIN_TEXT:
				{
				State = 224;
				Match(PLAIN_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==PLAIN_TEXT) {
				{
				State = 230;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Comma:
					{
					State = 227;
					Match(Comma);
					State = 228;
					expression2();
					}
					break;
				case PLAIN_TEXT:
					{
					State = 229;
					Match(PLAIN_TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			Match(Rparen);
			State = 236;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			expression2();
			State = 239;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(MiniCParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusEquals() { return GetToken(MiniCParser.PlusEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusEquals() { return GetToken(MiniCParser.MinusEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultEquals() { return GetToken(MiniCParser.MultEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivEquals() { return GetToken(MiniCParser.DivEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModEquals() { return GetToken(MiniCParser.ModEquals, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 139752325936840704L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context[] expression2() {
			return GetRuleContexts<Expression2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2(int i) {
			return GetRuleContext<Expression2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 38, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			expression2();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 244;
				Match(Comma);
				State = 245;
				expression2();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LList() { return GetTokens(MiniCParser.LList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LList(int i) {
			return GetToken(MiniCParser.LList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context[] expression2() {
			return GetRuleContexts<Expression2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2(int i) {
			return GetRuleContext<Expression2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RList() { return GetTokens(MiniCParser.RList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RList(int i) {
			return GetToken(MiniCParser.RList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCParser.DOT, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(ID);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LList || _la==DOT) {
				{
				State = 258;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LList:
					{
					State = 252;
					Match(LList);
					State = 253;
					expression2();
					State = 254;
					Match(RList);
					}
					break;
				case DOT:
					{
					State = 256;
					Match(DOT);
					State = 257;
					Match(ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalOr() { return GetTokens(MiniCParser.LogicalOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr(int i) {
			return GetToken(MiniCParser.LogicalOr, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 42, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			condTerm();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalOr) {
				{
				{
				State = 264;
				Match(LogicalOr);
				State = 265;
				condTerm();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalAnd() { return GetTokens(MiniCParser.LogicalAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd(int i) {
			return GetToken(MiniCParser.LogicalAnd, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 44, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			condFact();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalAnd) {
				{
				{
				State = 272;
				Match(LogicalAnd);
				State = 273;
				condFact();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context[] expression2() {
			return GetRuleContexts<Expression2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2(int i) {
			return GetRuleContext<Expression2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 46, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			expression2();
			State = 280;
			relop();
			State = 281;
			expression2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 48, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(Lparen);
			State = 284;
			type();
			State = 285;
			Match(Rparen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash() { return GetToken(MiniCParser.Dash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public Expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression2; } }
	}

	[RuleVersion(0)]
	public Expression2Context expression2() {
		Expression2Context _localctx = new Expression2Context(Context, State);
		EnterRule(_localctx, 50, RULE_expression2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dash) {
				{
				State = 287;
				Match(Dash);
				}
			}

			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 290;
				cast();
				}
				break;
			}
			State = 293;
			term();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 294;
				addop();
				State = 295;
				term();
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MiniCParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharConst() { return GetToken(MiniCParser.CharConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConst() { return GetToken(MiniCParser.StringConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MiniCParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MiniCParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(MiniCParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 52, RULE_factor);
		int _la;
		try {
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				designator();
				State = 307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 303;
					Match(Lparen);
					State = 304;
					actPars();
					State = 305;
					Match(Rparen);
					}
					break;
				}
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				Match(NUM);
				}
				break;
			case CharConst:
				EnterOuterAlt(_localctx, 3);
				{
				State = 310;
				Match(CharConst);
				}
				break;
			case StringConst:
				EnterOuterAlt(_localctx, 4);
				{
				State = 311;
				Match(StringConst);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 5);
				{
				State = 312;
				_la = TokenStream.LA(1);
				if ( !(_la==True || _la==False) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 313;
				Match(New);
				State = 314;
				type();
				}
				}
				break;
			case Lparen:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 315;
				Match(Lparen);
				State = 316;
				expression2();
				State = 317;
				Match(Rparen);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 54, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			factor();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0) {
				{
				{
				State = 322;
				mulop();
				State = 323;
				factor();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mult() { return GetToken(MiniCParser.Mult, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(MiniCParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(MiniCParser.Mod, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 56, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MiniCParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MiniCParser.Minus, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 58, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MiniCParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEquals() { return GetToken(MiniCParser.LessThanOrEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(MiniCParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEquals() { return GetToken(MiniCParser.GreaterThanOrEquals, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 60, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8646911284551352320L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LList() { return GetTokens(MiniCParser.LList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LList(int i) {
			return GetToken(MiniCParser.LList, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RList() { return GetTokens(MiniCParser.RList); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RList(int i) {
			return GetToken(MiniCParser.RList, i);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 62, RULE_ident);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(ID);
			State = 341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 337;
					Match(LList);
					State = 338;
					Match(RList);
					}
					} 
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,70,345,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,3,0,66,8,0,1,0,5,0,69,8,0,10,0,12,0,
		72,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,84,8,2,10,2,12,2,87,
		9,2,1,2,1,2,1,3,1,3,1,3,3,3,94,8,3,1,4,1,4,1,4,1,4,5,4,100,8,4,10,4,12,
		4,103,9,4,1,4,1,4,1,5,1,5,3,5,109,8,5,1,5,1,5,1,5,3,5,114,8,5,1,5,1,5,
		1,5,1,6,1,6,1,6,5,6,122,8,6,10,6,12,6,125,9,6,1,7,1,7,1,7,1,8,1,8,1,8,
		3,8,133,8,8,1,8,5,8,136,8,8,10,8,12,8,139,9,8,1,9,1,9,1,9,5,9,144,8,9,
		10,9,12,9,147,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,156,8,10,1,10,
		1,10,1,10,3,10,161,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,3,10,175,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,184,
		8,11,1,12,1,12,1,12,1,12,5,12,190,8,12,10,12,12,12,193,9,12,1,12,5,12,
		196,8,12,10,12,12,12,199,9,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,3,14,212,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
		16,1,16,1,16,1,16,3,16,226,8,16,1,16,1,16,1,16,5,16,231,8,16,10,16,12,
		16,234,9,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,5,19,
		247,8,19,10,19,12,19,250,9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,
		259,8,20,10,20,12,20,262,9,20,1,21,1,21,1,21,5,21,267,8,21,10,21,12,21,
		270,9,21,1,22,1,22,1,22,5,22,275,8,22,10,22,12,22,278,9,22,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,25,3,25,289,8,25,1,25,3,25,292,8,25,1,25,
		1,25,1,25,1,25,5,25,298,8,25,10,25,12,25,301,9,25,1,26,1,26,1,26,1,26,
		1,26,3,26,308,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,
		26,320,8,26,1,27,1,27,1,27,1,27,5,27,326,8,27,10,27,12,27,329,9,27,1,28,
		1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,5,31,340,8,31,10,31,12,31,343,
		9,31,1,31,0,0,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,0,5,2,0,47,47,52,56,1,0,63,64,1,0,
		41,43,1,0,39,40,1,0,59,62,362,0,65,1,0,0,0,2,75,1,0,0,0,4,79,1,0,0,0,6,
		93,1,0,0,0,8,95,1,0,0,0,10,108,1,0,0,0,12,118,1,0,0,0,14,126,1,0,0,0,16,
		129,1,0,0,0,18,140,1,0,0,0,20,174,1,0,0,0,22,176,1,0,0,0,24,185,1,0,0,
		0,26,203,1,0,0,0,28,209,1,0,0,0,30,215,1,0,0,0,32,221,1,0,0,0,34,238,1,
		0,0,0,36,241,1,0,0,0,38,243,1,0,0,0,40,251,1,0,0,0,42,263,1,0,0,0,44,271,
		1,0,0,0,46,279,1,0,0,0,48,283,1,0,0,0,50,288,1,0,0,0,52,319,1,0,0,0,54,
		321,1,0,0,0,56,330,1,0,0,0,58,332,1,0,0,0,60,334,1,0,0,0,62,336,1,0,0,
		0,64,66,3,2,1,0,65,64,1,0,0,0,65,66,1,0,0,0,66,70,1,0,0,0,67,69,3,4,2,
		0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,
		0,72,70,1,0,0,0,73,74,5,0,0,1,74,1,1,0,0,0,75,76,5,1,0,0,76,77,3,62,31,
		0,77,78,5,9,0,0,78,3,1,0,0,0,79,80,5,2,0,0,80,81,3,62,31,0,81,85,5,10,
		0,0,82,84,3,6,3,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,
		0,0,86,88,1,0,0,0,87,85,1,0,0,0,88,89,5,11,0,0,89,5,1,0,0,0,90,94,3,8,
		4,0,91,94,3,10,5,0,92,94,3,4,2,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,
		0,0,94,7,1,0,0,0,95,96,3,16,8,0,96,101,3,62,31,0,97,98,5,16,0,0,98,100,
		3,62,31,0,99,97,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,
		102,104,1,0,0,0,103,101,1,0,0,0,104,105,5,9,0,0,105,9,1,0,0,0,106,109,
		3,16,8,0,107,109,5,7,0,0,108,106,1,0,0,0,108,107,1,0,0,0,109,110,1,0,0,
		0,110,111,5,68,0,0,111,113,5,12,0,0,112,114,3,12,6,0,113,112,1,0,0,0,113,
		114,1,0,0,0,114,115,1,0,0,0,115,116,5,13,0,0,116,117,3,18,9,0,117,11,1,
		0,0,0,118,123,3,14,7,0,119,120,5,16,0,0,120,122,3,14,7,0,121,119,1,0,0,
		0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,13,1,0,0,0,125,123,
		1,0,0,0,126,127,3,16,8,0,127,128,3,62,31,0,128,15,1,0,0,0,129,137,3,62,
		31,0,130,132,5,14,0,0,131,133,3,62,31,0,132,131,1,0,0,0,132,133,1,0,0,
		0,133,134,1,0,0,0,134,136,5,15,0,0,135,130,1,0,0,0,136,139,1,0,0,0,137,
		135,1,0,0,0,137,138,1,0,0,0,138,17,1,0,0,0,139,137,1,0,0,0,140,145,5,10,
		0,0,141,144,3,20,10,0,142,144,3,8,4,0,143,141,1,0,0,0,143,142,1,0,0,0,
		144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,145,
		1,0,0,0,148,149,5,11,0,0,149,19,1,0,0,0,150,160,3,40,20,0,151,152,5,51,
		0,0,152,161,3,50,25,0,153,155,5,12,0,0,154,156,3,38,19,0,155,154,1,0,0,
		0,155,156,1,0,0,0,156,157,1,0,0,0,157,161,5,13,0,0,158,161,5,48,0,0,159,
		161,5,49,0,0,160,151,1,0,0,0,160,153,1,0,0,0,160,158,1,0,0,0,160,159,1,
		0,0,0,161,162,1,0,0,0,162,163,5,9,0,0,163,175,1,0,0,0,164,175,3,22,11,
		0,165,175,3,24,12,0,166,175,3,26,13,0,167,168,5,21,0,0,168,175,5,9,0,0,
		169,175,3,28,14,0,170,175,3,30,15,0,171,175,3,32,16,0,172,175,3,18,9,0,
		173,175,5,9,0,0,174,150,1,0,0,0,174,164,1,0,0,0,174,165,1,0,0,0,174,166,
		1,0,0,0,174,167,1,0,0,0,174,169,1,0,0,0,174,170,1,0,0,0,174,171,1,0,0,
		0,174,172,1,0,0,0,174,173,1,0,0,0,175,21,1,0,0,0,176,177,5,17,0,0,177,
		178,5,12,0,0,178,179,3,42,21,0,179,180,5,13,0,0,180,183,3,20,10,0,181,
		182,5,18,0,0,182,184,3,20,10,0,183,181,1,0,0,0,183,184,1,0,0,0,184,23,
		1,0,0,0,185,186,5,19,0,0,186,187,5,12,0,0,187,191,3,34,17,0,188,190,3,
		8,4,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,
		192,197,1,0,0,0,193,191,1,0,0,0,194,196,3,42,21,0,195,194,1,0,0,0,196,
		199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,197,1,
		0,0,0,200,201,5,13,0,0,201,202,3,20,10,0,202,25,1,0,0,0,203,204,5,20,0,
		0,204,205,5,12,0,0,205,206,3,42,21,0,206,207,5,13,0,0,207,208,3,20,10,
		0,208,27,1,0,0,0,209,211,5,22,0,0,210,212,3,50,25,0,211,210,1,0,0,0,211,
		212,1,0,0,0,212,213,1,0,0,0,213,214,5,9,0,0,214,29,1,0,0,0,215,216,5,23,
		0,0,216,217,5,12,0,0,217,218,3,40,20,0,218,219,5,13,0,0,219,220,5,9,0,
		0,220,31,1,0,0,0,221,222,5,24,0,0,222,225,5,12,0,0,223,226,3,50,25,0,224,
		226,5,66,0,0,225,223,1,0,0,0,225,224,1,0,0,0,226,232,1,0,0,0,227,228,5,
		16,0,0,228,231,3,50,25,0,229,231,5,66,0,0,230,227,1,0,0,0,230,229,1,0,
		0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,
		232,1,0,0,0,235,236,5,13,0,0,236,237,5,9,0,0,237,33,1,0,0,0,238,239,3,
		50,25,0,239,240,5,9,0,0,240,35,1,0,0,0,241,242,7,0,0,0,242,37,1,0,0,0,
		243,248,3,50,25,0,244,245,5,16,0,0,245,247,3,50,25,0,246,244,1,0,0,0,247,
		250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,39,1,0,0,0,250,248,1,0,
		0,0,251,260,5,68,0,0,252,253,5,14,0,0,253,254,3,50,25,0,254,255,5,15,0,
		0,255,259,1,0,0,0,256,257,5,50,0,0,257,259,5,68,0,0,258,252,1,0,0,0,258,
		256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,41,1,0,
		0,0,262,260,1,0,0,0,263,268,3,44,22,0,264,265,5,45,0,0,265,267,3,44,22,
		0,266,264,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,
		43,1,0,0,0,270,268,1,0,0,0,271,276,3,46,23,0,272,273,5,44,0,0,273,275,
		3,46,23,0,274,272,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,
		0,0,277,45,1,0,0,0,278,276,1,0,0,0,279,280,3,50,25,0,280,281,3,60,30,0,
		281,282,3,50,25,0,282,47,1,0,0,0,283,284,5,12,0,0,284,285,3,16,8,0,285,
		286,5,13,0,0,286,49,1,0,0,0,287,289,5,38,0,0,288,287,1,0,0,0,288,289,1,
		0,0,0,289,291,1,0,0,0,290,292,3,48,24,0,291,290,1,0,0,0,291,292,1,0,0,
		0,292,293,1,0,0,0,293,299,3,54,27,0,294,295,3,58,29,0,295,296,3,54,27,
		0,296,298,1,0,0,0,297,294,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,
		300,1,0,0,0,300,51,1,0,0,0,301,299,1,0,0,0,302,307,3,40,20,0,303,304,5,
		12,0,0,304,305,3,38,19,0,305,306,5,13,0,0,306,308,1,0,0,0,307,303,1,0,
		0,0,307,308,1,0,0,0,308,320,1,0,0,0,309,320,5,67,0,0,310,320,5,35,0,0,
		311,320,5,34,0,0,312,320,7,1,0,0,313,314,5,65,0,0,314,320,3,16,8,0,315,
		316,5,12,0,0,316,317,3,50,25,0,317,318,5,13,0,0,318,320,1,0,0,0,319,302,
		1,0,0,0,319,309,1,0,0,0,319,310,1,0,0,0,319,311,1,0,0,0,319,312,1,0,0,
		0,319,313,1,0,0,0,319,315,1,0,0,0,320,53,1,0,0,0,321,327,3,52,26,0,322,
		323,3,56,28,0,323,324,3,52,26,0,324,326,1,0,0,0,325,322,1,0,0,0,326,329,
		1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,55,1,0,0,0,329,327,1,0,0,0,
		330,331,7,2,0,0,331,57,1,0,0,0,332,333,7,3,0,0,333,59,1,0,0,0,334,335,
		7,4,0,0,335,61,1,0,0,0,336,341,5,68,0,0,337,338,5,14,0,0,338,340,5,15,
		0,0,339,337,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,
		63,1,0,0,0,343,341,1,0,0,0,34,65,70,85,93,101,108,113,123,132,137,143,
		145,155,160,174,183,191,197,211,225,230,232,248,258,260,268,276,288,291,
		299,307,319,327,341
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen
