//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/kosti/RiderProjects/AvaloniaApplication5/AvaloniaApplication5/MiniCParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Using=1, Class=2, VarDecl=3, ClassDecl=4, MethodDecl=5, Type=6, Statement=7, 
		Semicolon=8, Lbrace=9, Rbrace=10, Lparen=11, Rparen=12, Comma=13, If=14, 
		Else=15, For=16, While=17, Break=18, Return=19, Read=20, Write=21, ActPars=22, 
		Condition=23, CondTerm=24, CondFact=25, Cast=26, Expr=27, Term=28, Factor=29, 
		Designator=30, StringConst=31, CharConst=32, Number=33, Colon=34, Plus=35, 
		Minus=36, Mult=37, Div=38, Mod=39, LogicalAnd=40, LogicalOr=41, QuestionMark=42, 
		PlusEquals=43, PlusPlus=44, MinusMinus=45, DOT=46, MinusEquals=47, MultEquals=48, 
		DivEquals=49, ModEquals=50, Equals=51, NotEquals=52, LogicalNot=53, LessThan=54, 
		GreaterThan=55, LessThanOrEquals=56, GreaterThanOrEquals=57, PLAIN_TEXT=58, 
		NUM=59, ID=60, COMMENT=61, WS=62;
	public const int
		RULE_program = 0, RULE_usingDeclaration = 1, RULE_classDeclaration = 2, 
		RULE_memberDeclaration = 3, RULE_varDeclaration = 4, RULE_methodDeclaration = 5, 
		RULE_parameterList = 6, RULE_parameter = 7, RULE_type = 8, RULE_block = 9, 
		RULE_statement = 10, RULE_ifStatement = 11, RULE_whileStatement = 12, 
		RULE_forStatement = 13, RULE_forControl = 14, RULE_returnStatement = 15, 
		RULE_readStatement = 16, RULE_writeStatement = 17, RULE_expressionStatement = 18, 
		RULE_expression = 19, RULE_assignmentExpression = 20, RULE_assignmentOperator = 21, 
		RULE_conditionalExpression = 22, RULE_logicalOrExpression = 23, RULE_logicalAndExpression = 24, 
		RULE_equalityExpression = 25, RULE_relationalExpression = 26, RULE_additiveExpression = 27, 
		RULE_multiplicativeExpression = 28, RULE_castExpression = 29, RULE_unaryExpression = 30, 
		RULE_postfixExpression = 31, RULE_argumentList = 32, RULE_primaryExpression = 33, 
		RULE_designator = 34, RULE_methodInvocation = 35, RULE_number = 36, RULE_charConst = 37, 
		RULE_unaryOperator = 38;
	public static readonly string[] ruleNames = {
		"program", "usingDeclaration", "classDeclaration", "memberDeclaration", 
		"varDeclaration", "methodDeclaration", "parameterList", "parameter", "type", 
		"block", "statement", "ifStatement", "whileStatement", "forStatement", 
		"forControl", "returnStatement", "readStatement", "writeStatement", "expressionStatement", 
		"expression", "assignmentExpression", "assignmentOperator", "conditionalExpression", 
		"logicalOrExpression", "logicalAndExpression", "equalityExpression", "relationalExpression", 
		"additiveExpression", "multiplicativeExpression", "castExpression", "unaryExpression", 
		"postfixExpression", "argumentList", "primaryExpression", "designator", 
		"methodInvocation", "number", "charConst", "unaryOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'varDecl'", "'classDecl'", "'methodDecl'", 
		"'type'", "'statement'", "';'", "'{'", "'}'", "'('", "')'", "','", "'if'", 
		"'else'", "'for'", "'while'", "'break'", "'return'", "'read'", "'write'", 
		"'actPars'", "'condition'", "'condTerm'", "'condFact'", "'cast'", "'expr'", 
		"'term'", "'factor'", "'designator'", "'string'", "'char'", "'number'", 
		"':'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'?'", "'+='", 
		"'++'", "'--'", "'.'", "'-='", "'*='", "'/='", "'%='", "'=='", "'!='", 
		"'!'", "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Using", "Class", "VarDecl", "ClassDecl", "MethodDecl", "Type", 
		"Statement", "Semicolon", "Lbrace", "Rbrace", "Lparen", "Rparen", "Comma", 
		"If", "Else", "For", "While", "Break", "Return", "Read", "Write", "ActPars", 
		"Condition", "CondTerm", "CondFact", "Cast", "Expr", "Term", "Factor", 
		"Designator", "StringConst", "CharConst", "Number", "Colon", "Plus", "Minus", 
		"Mult", "Div", "Mod", "LogicalAnd", "LogicalOr", "QuestionMark", "PlusEquals", 
		"PlusPlus", "MinusMinus", "DOT", "MinusEquals", "MultEquals", "DivEquals", 
		"ModEquals", "Equals", "NotEquals", "LogicalNot", "LessThan", "GreaterThan", 
		"LessThanOrEquals", "GreaterThanOrEquals", "PLAIN_TEXT", "NUM", "ID", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Using) {
				{
				State = 78;
				usingDeclaration();
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Class) {
				{
				{
				State = 81;
				classDeclaration();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 87;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(MiniCParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(Using);
			State = 90;
			Match(ID);
			State = 91;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MiniCParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(Class);
			State = 94;
			Match(ID);
			State = 95;
			Match(Lbrace);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 44L) != 0) {
				{
				{
				State = 96;
				memberDeclaration();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_memberDeclaration);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VarDecl:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				varDeclaration();
				}
				break;
			case MethodDecl:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				methodDeclaration();
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				classDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VarDecl() { return GetToken(MiniCParser.VarDecl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(MiniCParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(MiniCParser.NUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(VarDecl);
			State = 110;
			type();
			State = 111;
			Match(ID);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Lbrace) {
				{
				{
				State = 112;
				Match(Lbrace);
				State = 113;
				Match(NUM);
				State = 114;
				Match(Rbrace);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MethodDecl() { return GetToken(MiniCParser.MethodDecl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(MethodDecl);
			State = 123;
			type();
			State = 124;
			Match(ID);
			State = 125;
			Match(Lparen);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Type || _la==ID) {
				{
				State = 126;
				parameterList();
				}
			}

			State = 129;
			Match(Rparen);
			State = 130;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			parameter();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 133;
				Match(Comma);
				State = 134;
				parameter();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			type();
			State = 141;
			Match(ID);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Lbrace) {
				{
				{
				State = 142;
				Match(Lbrace);
				State = 143;
				Match(Rbrace);
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(MiniCParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = TokenStream.LA(1);
			if ( !(_la==Type || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(MiniCParser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(MiniCParser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(Lbrace);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2026672716252924672L) != 0) {
				{
				{
				State = 152;
				statement();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			Match(Rbrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadStatementContext readStatement() {
			return GetRuleContext<ReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteStatementContext writeStatement() {
			return GetRuleContext<WriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lbrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				block();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				ifStatement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162;
				whileStatement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163;
				forStatement();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 5);
				{
				State = 164;
				returnStatement();
				}
				break;
			case Read:
				EnterOuterAlt(_localctx, 6);
				{
				State = 165;
				readStatement();
				}
				break;
			case Write:
				EnterOuterAlt(_localctx, 7);
				{
				State = 166;
				writeStatement();
				}
				break;
			case Lparen:
			case CharConst:
			case Plus:
			case Minus:
			case PlusPlus:
			case MinusMinus:
			case LogicalNot:
			case PLAIN_TEXT:
			case NUM:
			case ID:
				EnterOuterAlt(_localctx, 8);
				{
				State = 167;
				expressionStatement();
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 9);
				{
				State = 168;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MiniCParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MiniCParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(If);
			State = 172;
			Match(Lparen);
			State = 173;
			expression();
			State = 174;
			Match(Rparen);
			State = 175;
			statement();
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 176;
				Match(Else);
				State = 177;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MiniCParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(While);
			State = 181;
			Match(Lparen);
			State = 182;
			expression();
			State = 183;
			Match(Rparen);
			State = 184;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MiniCParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(For);
			State = 187;
			Match(Lparen);
			State = 188;
			forControl();
			State = 189;
			Match(Rparen);
			State = 190;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 28, RULE_forControl);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VarDecl:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				varDeclaration();
				}
				break;
			case Lparen:
			case CharConst:
			case Plus:
			case Minus:
			case PlusPlus:
			case MinusMinus:
			case LogicalNot:
			case PLAIN_TEXT:
			case NUM:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				expressionStatement();
				}
				break;
			case Rparen:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MiniCParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(Return);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2026672716249040896L) != 0) {
				{
				State = 198;
				expression();
				}
			}

			State = 201;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MiniCParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStatement; } }
	}

	[RuleVersion(0)]
	public ReadStatementContext readStatement() {
		ReadStatementContext _localctx = new ReadStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_readStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(Read);
			State = 204;
			Match(Lparen);
			State = 205;
			designator();
			State = 206;
			Match(Rparen);
			State = 207;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(MiniCParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLAIN_TEXT() { return GetTokens(MiniCParser.PLAIN_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT(int i) {
			return GetToken(MiniCParser.PLAIN_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public WriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStatement; } }
	}

	[RuleVersion(0)]
	public WriteStatementContext writeStatement() {
		WriteStatementContext _localctx = new WriteStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_writeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Write);
			State = 210;
			Match(Lparen);
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 211;
				expression();
				}
				break;
			case 2:
				{
				State = 212;
				Match(PLAIN_TEXT);
				}
				break;
			}
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==PLAIN_TEXT) {
				{
				State = 218;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Comma:
					{
					State = 215;
					Match(Comma);
					State = 216;
					expression();
					}
					break;
				case PLAIN_TEXT:
					{
					State = 217;
					Match(PLAIN_TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 223;
			Match(Rparen);
			State = 224;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCParser.Semicolon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			expression();
			State = 227;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext[] conditionalExpression() {
			return GetRuleContexts<ConditionalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression(int i) {
			return GetRuleContext<ConditionalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			conditionalExpression();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4371658232037376L) != 0) {
				{
				State = 232;
				assignmentOperator();
				State = 233;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(MiniCParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusEquals() { return GetToken(MiniCParser.PlusEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusEquals() { return GetToken(MiniCParser.MinusEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultEquals() { return GetToken(MiniCParser.MultEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivEquals() { return GetToken(MiniCParser.DivEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModEquals() { return GetToken(MiniCParser.ModEquals, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4371658232037376L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MiniCParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MiniCParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			logicalOrExpression();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 240;
				Match(QuestionMark);
				State = 241;
				expression();
				State = 242;
				Match(Colon);
				State = 243;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalOr() { return GetTokens(MiniCParser.LogicalOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr(int i) {
			return GetToken(MiniCParser.LogicalOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			logicalAndExpression();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalOr) {
				{
				{
				State = 248;
				Match(LogicalOr);
				State = 249;
				logicalAndExpression();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalAnd() { return GetTokens(MiniCParser.LogicalAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd(int i) {
			return GetToken(MiniCParser.LogicalAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			equalityExpression();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalAnd) {
				{
				{
				State = 256;
				Match(LogicalAnd);
				State = 257;
				equalityExpression();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(MiniCParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(MiniCParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEquals() { return GetTokens(MiniCParser.NotEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals(int i) {
			return GetToken(MiniCParser.NotEquals, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_equalityExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			relationalExpression();
			State = 268;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 264;
					_la = TokenStream.LA(1);
					if ( !(_la==Equals || _la==NotEquals) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 265;
					relationalExpression();
					}
					} 
				}
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThan() { return GetTokens(MiniCParser.LessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan(int i) {
			return GetToken(MiniCParser.LessThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThanOrEquals() { return GetTokens(MiniCParser.LessThanOrEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEquals(int i) {
			return GetToken(MiniCParser.LessThanOrEquals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterThan() { return GetTokens(MiniCParser.GreaterThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan(int i) {
			return GetToken(MiniCParser.GreaterThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterThanOrEquals() { return GetTokens(MiniCParser.GreaterThanOrEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEquals(int i) {
			return GetToken(MiniCParser.GreaterThanOrEquals, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			additiveExpression();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977642229760L) != 0) {
				{
				{
				State = 272;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977642229760L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 273;
				additiveExpression();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(MiniCParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(MiniCParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(MiniCParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(MiniCParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			multiplicativeExpression();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 280;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 281;
				multiplicativeExpression();
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mult() { return GetTokens(MiniCParser.Mult); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mult(int i) {
			return GetToken(MiniCParser.Mult, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(MiniCParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(MiniCParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(MiniCParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(MiniCParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			castExpression();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0) {
				{
				{
				State = 288;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 289;
				castExpression();
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_castExpression);
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				Match(Lparen);
				State = 297;
				type();
				State = 298;
				Match(Rparen);
				State = 299;
				castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MiniCParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MiniCParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_unaryExpression);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lparen:
			case CharConst:
			case PLAIN_TEXT:
			case NUM:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303;
				postfixExpression();
				}
				break;
			case PlusPlus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				Match(PlusPlus);
				State = 305;
				unaryExpression();
				}
				break;
			case MinusMinus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306;
				Match(MinusMinus);
				State = 307;
				unaryExpression();
				}
				break;
			case Plus:
			case Minus:
			case LogicalNot:
				EnterOuterAlt(_localctx, 4);
				{
				State = 308;
				unaryOperator();
				State = 309;
				castExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lparen() { return GetTokens(MiniCParser.Lparen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen(int i) {
			return GetToken(MiniCParser.Lparen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rparen() { return GetTokens(MiniCParser.Rparen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen(int i) {
			return GetToken(MiniCParser.Rparen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(MiniCParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(MiniCParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(MiniCParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(MiniCParser.MinusMinus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			primaryExpression();
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302313472L) != 0) {
				{
				State = 327;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Lbrace:
					{
					State = 314;
					Match(Lbrace);
					State = 315;
					expression();
					State = 316;
					Match(Rbrace);
					}
					break;
				case Lparen:
					{
					State = 318;
					Match(Lparen);
					State = 320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2026672716249040896L) != 0) {
						{
						State = 319;
						argumentList();
						}
					}

					State = 322;
					Match(Rparen);
					}
					break;
				case DOT:
					{
					State = 323;
					Match(DOT);
					State = 324;
					Match(ID);
					}
					break;
				case PlusPlus:
					{
					State = 325;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 326;
					Match(MinusMinus);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 64, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			expression();
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 333;
				Match(Comma);
				State = 334;
				expression();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharConstContext charConst() {
			return GetRuleContext<CharConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAIN_TEXT() { return GetToken(MiniCParser.PLAIN_TEXT, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_primaryExpression);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				designator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				methodInvocation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 342;
				Match(Lparen);
				State = 343;
				expression();
				State = 344;
				Match(Rparen);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 346;
				Match(ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 347;
				number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 348;
				charConst();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 349;
				Match(PLAIN_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lbrace() { return GetTokens(MiniCParser.Lbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace(int i) {
			return GetToken(MiniCParser.Lbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rbrace() { return GetTokens(MiniCParser.Rbrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace(int i) {
			return GetToken(MiniCParser.Rbrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCParser.DOT, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_designator);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(ID);
			State = 361;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 359;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Lbrace:
						{
						State = 353;
						Match(Lbrace);
						State = 354;
						expression();
						State = 355;
						Match(Rbrace);
						}
						break;
					case DOT:
						{
						State = 357;
						Match(DOT);
						State = 358;
						Match(ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(MiniCParser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(MiniCParser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 70, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(ID);
			State = 365;
			Match(Lparen);
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2026672716249040896L) != 0) {
				{
				State = 366;
				argumentList();
				}
			}

			State = 369;
			Match(Rparen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MiniCParser.NUM, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 72, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharConst() { return GetToken(MiniCParser.CharConst, 0); }
		public CharConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charConst; } }
	}

	[RuleVersion(0)]
	public CharConstContext charConst() {
		CharConstContext _localctx = new CharConstContext(Context, State);
		EnterRule(_localctx, 74, RULE_charConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(CharConst);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MiniCParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MiniCParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalNot() { return GetToken(MiniCParser.LogicalNot, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 9007302333956096L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,62,378,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,3,0,80,8,0,1,0,5,0,83,8,0,10,0,12,0,
		86,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,98,8,2,10,2,12,2,101,
		9,2,1,2,1,2,1,3,1,3,1,3,3,3,108,8,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,116,8,
		4,10,4,12,4,119,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,128,8,5,1,5,1,5,1,
		5,1,6,1,6,1,6,5,6,136,8,6,10,6,12,6,139,9,6,1,7,1,7,1,7,1,7,5,7,145,8,
		7,10,7,12,7,148,9,7,1,8,1,8,1,9,1,9,5,9,154,8,9,10,9,12,9,157,9,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,170,8,10,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,3,11,179,8,11,1,12,1,12,1,12,1,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,196,8,14,1,15,1,15,3,
		15,200,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
		3,17,214,8,17,1,17,1,17,1,17,5,17,219,8,17,10,17,12,17,222,9,17,1,17,1,
		17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,236,8,20,1,21,
		1,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,246,8,22,1,23,1,23,1,23,5,23,251,
		8,23,10,23,12,23,254,9,23,1,24,1,24,1,24,5,24,259,8,24,10,24,12,24,262,
		9,24,1,25,1,25,1,25,5,25,267,8,25,10,25,12,25,270,9,25,1,26,1,26,1,26,
		5,26,275,8,26,10,26,12,26,278,9,26,1,27,1,27,1,27,5,27,283,8,27,10,27,
		12,27,286,9,27,1,28,1,28,1,28,5,28,291,8,28,10,28,12,28,294,9,28,1,29,
		1,29,1,29,1,29,1,29,1,29,3,29,302,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,3,30,312,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,321,8,31,
		1,31,1,31,1,31,1,31,1,31,5,31,328,8,31,10,31,12,31,331,9,31,1,32,1,32,
		1,32,5,32,336,8,32,10,32,12,32,339,9,32,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,3,33,351,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,
		34,360,8,34,10,34,12,34,363,9,34,1,35,1,35,1,35,3,35,368,8,35,1,35,1,35,
		1,36,1,36,1,37,1,37,1,38,1,38,1,38,0,0,39,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,0,7,2,0,6,6,60,60,2,0,43,43,47,51,1,0,51,52,1,0,54,57,1,0,
		35,36,1,0,37,39,2,0,35,36,53,53,391,0,79,1,0,0,0,2,89,1,0,0,0,4,93,1,0,
		0,0,6,107,1,0,0,0,8,109,1,0,0,0,10,122,1,0,0,0,12,132,1,0,0,0,14,140,1,
		0,0,0,16,149,1,0,0,0,18,151,1,0,0,0,20,169,1,0,0,0,22,171,1,0,0,0,24,180,
		1,0,0,0,26,186,1,0,0,0,28,195,1,0,0,0,30,197,1,0,0,0,32,203,1,0,0,0,34,
		209,1,0,0,0,36,226,1,0,0,0,38,229,1,0,0,0,40,231,1,0,0,0,42,237,1,0,0,
		0,44,239,1,0,0,0,46,247,1,0,0,0,48,255,1,0,0,0,50,263,1,0,0,0,52,271,1,
		0,0,0,54,279,1,0,0,0,56,287,1,0,0,0,58,301,1,0,0,0,60,311,1,0,0,0,62,313,
		1,0,0,0,64,332,1,0,0,0,66,350,1,0,0,0,68,352,1,0,0,0,70,364,1,0,0,0,72,
		371,1,0,0,0,74,373,1,0,0,0,76,375,1,0,0,0,78,80,3,2,1,0,79,78,1,0,0,0,
		79,80,1,0,0,0,80,84,1,0,0,0,81,83,3,4,2,0,82,81,1,0,0,0,83,86,1,0,0,0,
		84,82,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,84,1,0,0,0,87,88,5,0,0,1,
		88,1,1,0,0,0,89,90,5,1,0,0,90,91,5,60,0,0,91,92,5,8,0,0,92,3,1,0,0,0,93,
		94,5,2,0,0,94,95,5,60,0,0,95,99,5,9,0,0,96,98,3,6,3,0,97,96,1,0,0,0,98,
		101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,
		0,102,103,5,10,0,0,103,5,1,0,0,0,104,108,3,8,4,0,105,108,3,10,5,0,106,
		108,3,4,2,0,107,104,1,0,0,0,107,105,1,0,0,0,107,106,1,0,0,0,108,7,1,0,
		0,0,109,110,5,3,0,0,110,111,3,16,8,0,111,117,5,60,0,0,112,113,5,9,0,0,
		113,114,5,59,0,0,114,116,5,10,0,0,115,112,1,0,0,0,116,119,1,0,0,0,117,
		115,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,
		8,0,0,121,9,1,0,0,0,122,123,5,5,0,0,123,124,3,16,8,0,124,125,5,60,0,0,
		125,127,5,11,0,0,126,128,3,12,6,0,127,126,1,0,0,0,127,128,1,0,0,0,128,
		129,1,0,0,0,129,130,5,12,0,0,130,131,3,18,9,0,131,11,1,0,0,0,132,137,3,
		14,7,0,133,134,5,13,0,0,134,136,3,14,7,0,135,133,1,0,0,0,136,139,1,0,0,
		0,137,135,1,0,0,0,137,138,1,0,0,0,138,13,1,0,0,0,139,137,1,0,0,0,140,141,
		3,16,8,0,141,146,5,60,0,0,142,143,5,9,0,0,143,145,5,10,0,0,144,142,1,0,
		0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,15,1,0,0,0,148,
		146,1,0,0,0,149,150,7,0,0,0,150,17,1,0,0,0,151,155,5,9,0,0,152,154,3,20,
		10,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,
		158,1,0,0,0,157,155,1,0,0,0,158,159,5,10,0,0,159,19,1,0,0,0,160,170,3,
		18,9,0,161,170,3,22,11,0,162,170,3,24,12,0,163,170,3,26,13,0,164,170,3,
		30,15,0,165,170,3,32,16,0,166,170,3,34,17,0,167,170,3,36,18,0,168,170,
		5,8,0,0,169,160,1,0,0,0,169,161,1,0,0,0,169,162,1,0,0,0,169,163,1,0,0,
		0,169,164,1,0,0,0,169,165,1,0,0,0,169,166,1,0,0,0,169,167,1,0,0,0,169,
		168,1,0,0,0,170,21,1,0,0,0,171,172,5,14,0,0,172,173,5,11,0,0,173,174,3,
		38,19,0,174,175,5,12,0,0,175,178,3,20,10,0,176,177,5,15,0,0,177,179,3,
		20,10,0,178,176,1,0,0,0,178,179,1,0,0,0,179,23,1,0,0,0,180,181,5,17,0,
		0,181,182,5,11,0,0,182,183,3,38,19,0,183,184,5,12,0,0,184,185,3,20,10,
		0,185,25,1,0,0,0,186,187,5,16,0,0,187,188,5,11,0,0,188,189,3,28,14,0,189,
		190,5,12,0,0,190,191,3,20,10,0,191,27,1,0,0,0,192,196,3,8,4,0,193,196,
		3,36,18,0,194,196,1,0,0,0,195,192,1,0,0,0,195,193,1,0,0,0,195,194,1,0,
		0,0,196,29,1,0,0,0,197,199,5,19,0,0,198,200,3,38,19,0,199,198,1,0,0,0,
		199,200,1,0,0,0,200,201,1,0,0,0,201,202,5,8,0,0,202,31,1,0,0,0,203,204,
		5,20,0,0,204,205,5,11,0,0,205,206,3,68,34,0,206,207,5,12,0,0,207,208,5,
		8,0,0,208,33,1,0,0,0,209,210,5,21,0,0,210,213,5,11,0,0,211,214,3,38,19,
		0,212,214,5,58,0,0,213,211,1,0,0,0,213,212,1,0,0,0,214,220,1,0,0,0,215,
		216,5,13,0,0,216,219,3,38,19,0,217,219,5,58,0,0,218,215,1,0,0,0,218,217,
		1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,
		0,222,220,1,0,0,0,223,224,5,12,0,0,224,225,5,8,0,0,225,35,1,0,0,0,226,
		227,3,38,19,0,227,228,5,8,0,0,228,37,1,0,0,0,229,230,3,40,20,0,230,39,
		1,0,0,0,231,235,3,44,22,0,232,233,3,42,21,0,233,234,3,44,22,0,234,236,
		1,0,0,0,235,232,1,0,0,0,235,236,1,0,0,0,236,41,1,0,0,0,237,238,7,1,0,0,
		238,43,1,0,0,0,239,245,3,46,23,0,240,241,5,42,0,0,241,242,3,38,19,0,242,
		243,5,34,0,0,243,244,3,44,22,0,244,246,1,0,0,0,245,240,1,0,0,0,245,246,
		1,0,0,0,246,45,1,0,0,0,247,252,3,48,24,0,248,249,5,41,0,0,249,251,3,48,
		24,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,
		47,1,0,0,0,254,252,1,0,0,0,255,260,3,50,25,0,256,257,5,40,0,0,257,259,
		3,50,25,0,258,256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,
		0,0,261,49,1,0,0,0,262,260,1,0,0,0,263,268,3,52,26,0,264,265,7,2,0,0,265,
		267,3,52,26,0,266,264,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,
		1,0,0,0,269,51,1,0,0,0,270,268,1,0,0,0,271,276,3,54,27,0,272,273,7,3,0,
		0,273,275,3,54,27,0,274,272,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,
		277,1,0,0,0,277,53,1,0,0,0,278,276,1,0,0,0,279,284,3,56,28,0,280,281,7,
		4,0,0,281,283,3,56,28,0,282,280,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,
		0,284,285,1,0,0,0,285,55,1,0,0,0,286,284,1,0,0,0,287,292,3,58,29,0,288,
		289,7,5,0,0,289,291,3,58,29,0,290,288,1,0,0,0,291,294,1,0,0,0,292,290,
		1,0,0,0,292,293,1,0,0,0,293,57,1,0,0,0,294,292,1,0,0,0,295,302,3,60,30,
		0,296,297,5,11,0,0,297,298,3,16,8,0,298,299,5,12,0,0,299,300,3,58,29,0,
		300,302,1,0,0,0,301,295,1,0,0,0,301,296,1,0,0,0,302,59,1,0,0,0,303,312,
		3,62,31,0,304,305,5,44,0,0,305,312,3,60,30,0,306,307,5,45,0,0,307,312,
		3,60,30,0,308,309,3,76,38,0,309,310,3,58,29,0,310,312,1,0,0,0,311,303,
		1,0,0,0,311,304,1,0,0,0,311,306,1,0,0,0,311,308,1,0,0,0,312,61,1,0,0,0,
		313,329,3,66,33,0,314,315,5,9,0,0,315,316,3,38,19,0,316,317,5,10,0,0,317,
		328,1,0,0,0,318,320,5,11,0,0,319,321,3,64,32,0,320,319,1,0,0,0,320,321,
		1,0,0,0,321,322,1,0,0,0,322,328,5,12,0,0,323,324,5,46,0,0,324,328,5,60,
		0,0,325,328,5,44,0,0,326,328,5,45,0,0,327,314,1,0,0,0,327,318,1,0,0,0,
		327,323,1,0,0,0,327,325,1,0,0,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,
		1,0,0,0,329,330,1,0,0,0,330,63,1,0,0,0,331,329,1,0,0,0,332,337,3,38,19,
		0,333,334,5,13,0,0,334,336,3,38,19,0,335,333,1,0,0,0,336,339,1,0,0,0,337,
		335,1,0,0,0,337,338,1,0,0,0,338,65,1,0,0,0,339,337,1,0,0,0,340,351,3,68,
		34,0,341,351,3,70,35,0,342,343,5,11,0,0,343,344,3,38,19,0,344,345,5,12,
		0,0,345,351,1,0,0,0,346,351,5,60,0,0,347,351,3,72,36,0,348,351,3,74,37,
		0,349,351,5,58,0,0,350,340,1,0,0,0,350,341,1,0,0,0,350,342,1,0,0,0,350,
		346,1,0,0,0,350,347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,67,1,0,
		0,0,352,361,5,60,0,0,353,354,5,9,0,0,354,355,3,38,19,0,355,356,5,10,0,
		0,356,360,1,0,0,0,357,358,5,46,0,0,358,360,5,60,0,0,359,353,1,0,0,0,359,
		357,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,69,1,0,
		0,0,363,361,1,0,0,0,364,365,5,60,0,0,365,367,5,11,0,0,366,368,3,64,32,
		0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,12,0,0,370,
		71,1,0,0,0,371,372,5,59,0,0,372,73,1,0,0,0,373,374,5,32,0,0,374,75,1,0,
		0,0,375,376,7,6,0,0,376,77,1,0,0,0,34,79,84,99,107,117,127,137,146,155,
		169,178,195,199,213,218,220,235,245,252,260,268,276,284,292,301,311,320,
		327,329,337,350,359,361,367
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen
